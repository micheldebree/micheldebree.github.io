{"version":3,"sources":["Utilities.js","Canvas.jsx","ImageUpload.jsx","MyRadioButtons.jsx","MyCheckbox.jsx","MySlider.jsx","ResetButton.jsx","ImageSource.jsx","RetropixelsImage.jsx","PaletteControl.jsx","Retropixels.jsx","logo.svg","version.js","App.jsx","reportWebVitals.js","index.jsx"],"names":["parseFilename","filename","periodPos","lastIndexOf","extension","substring","length","basename","Math","min","abbreviateFilename","maxSize","parsed","getImageDataFromPixelImage","pixelImage","palette","undefined","ImageData","imageWidth","mode","width","pixelWidth","imageData","height","y","x","paletteIndex","peek","pixelValue","colors","xx","index","r","g","b","data","Canvas","props","canvasRef","React","useRef","useEffect","current","getContext","putImageData","Box","m","ref","defaultProps","ImageUpload","onload","useState","error","setError","useDropzone","accept","maxFiles","acceptedFiles","fileRejections","getRootProps","getInputProps","file","reader","FileReader","onabort","onerror","Jimp","read","result","then","img","jimpImage","name","catch","err","message","readAsArrayBuffer","readFile","rejectedFile","errorMessages","errors","map","e","reduce","a","path","Container","border","boxShadow","borderRadius","borderColor","className","Typography","color","gutterBottom","Snackbar","open","autoHideDuration","onClose","Alert","severity","MyRadioButtons","label","value","items","onChange","tooltip","Tooltip","title","FormControl","component","FormLabel","RadioGroup","row","event","target","i","FormControlLabel","control","Radio","MyCheckbox","arrow","Checkbox","checked","MySlider","max","step","icon","disabled","Grid","container","item","xs","Slider","newValue","valueLabelDisplay","ResetButton","onClick","align","Button","size","variant","startIcon","normalizeDefault","greyscaleDefault","mirrorHorDefault","mirrorVerDefault","invertDefault","ImageSource","onChanged","sourceImage","setSourceImage","croppedImage","setCroppedImage","image","setImage","setImageData","setFilename","scale","setScale","normalize","setNormalize","greyscale","setGreyscale","mirrorHor","setMirrorHor","mirrorVer","setMirrorVer","invert","setInvert","brightness","setBrightness","contrast","setContrast","blur","setBlur","threshold","setThreshold","onLoadedCallback","useCallback","reset","dataSize","bitmap","slice","Uint8ClampedArray","from","getImageDataFromJimpImage","newImage","clone","cover","contain","blitImage","crop","this","clearJimpImage","blit","cropJimpImage","cropImage","mirror","autoGreyscale","defaultsSet","v","graphicMode","GraphicModes","all","RetropixelsImage","hires","nomaps","colorspaceId","ditherId","ditherRadius","defaultQuantizer","Quantizer","ColorSpaces","defaultConverter","Converter","defaultDitherer","OrderedDither","presets","setPixelImage","converter","setConverter","ditherer","setDitherer","quantizer","newPixelImage","resizedImage","resize","resizeToTargetSize","dither","convert","Palettes","colodore","paletteOptions","paletteIdDefault","enabledDefault","PaletteControl","paletteId","setPaletteId","setPalette","enabledMap","setEnabledMap","enabledColors","useMemo","Object","keys","filter","k","newPalette","enabled","newEnabledMap","subPalette","startIndex","id","push","ListItem","ListItemIcon","fontSize","style","List","dense","ditherOptions","colorspaceOptions","ditherDefault","paletteDefault","colorspaceDefault","hiresDefault","nomapsDefault","useStyles","makeStyles","theme","root","margin","spacing","Retropixels","pngOutputFilename","colorspace","setColorSpace","setHires","setNomaps","setDither","setDitherRadius","paletteCallback","p","newPixelImageCallback","c64OutputFilename","getDefaultExtension","parsedFilename","outputFormat","classes","sm","md","sx","marginRight","binary","C64Writer","toBinary","buffer","toBuffer","blob","Blob","type","saveAs","saveOutput","getBufferAsync","MIME_PNG","savePNG","createTheme","flexGrow","menuButton","App","onSourceImageChanged","newSourceImage","ThemeProvider","AppBar","position","Toolbar","src","Logo","alt","Link","href","AppVersion","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","document","getElementById","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.e59e8b93.chunk.js","sourcesContent":["export function parseFilename(filename) {\n  const periodPos = filename.lastIndexOf('.');\n  const extension = filename.substring(periodPos + 1, filename.length);\n  const basename = filename.substring(0, Math.min(30, periodPos));\n  return { basename, extension };\n}\n\nexport function abbreviateFilename(filename, maxSize) {\n  if (filename.length <= maxSize) {\n    return filename;\n  }\n  const parsed = parseFilename(filename);\n  return `${parsed.basename.substring(0, maxSize)}...${parsed.extension}`;\n}\n\nexport function getImageDataFromPixelImage(pixelImage, palette) {\n  if (pixelImage === undefined) {\n    return new ImageData(1, 1);\n  }\n  const imageWidth = pixelImage.mode.width * pixelImage.mode.pixelWidth;\n  const imageData = new ImageData(imageWidth, pixelImage.mode.height);\n  for (let y = 0; y < pixelImage.mode.height; y += 1) {\n    for (let x = 0; x < pixelImage.mode.width; x += 1) {\n      const paletteIndex = pixelImage.peek(x, y);\n      const pixelValue = paletteIndex !== undefined ? palette.colors[paletteIndex] : [0, 0, 0, 0];\n      for (let xx = 0; xx < pixelImage.mode.pixelWidth; xx += 1) {\n        const index = y * 4 * imageWidth + x * pixelImage.mode.pixelWidth * 4 + xx * 4;\n        const [r, g, b] = pixelValue;\n        imageData.data[index] = r;\n        imageData.data[index + 1] = g;\n        imageData.data[index + 2] = b;\n        imageData.data[index + 3] = 0xff;\n      }\n    }\n  }\n  return imageData;\n}\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from '@mui/material';\n\nfunction Canvas(props) {\n  const canvasRef = React.useRef(null);\n  const getContext = () => canvasRef.current.getContext('2d');\n\n  const { width, height, imageData } = props;\n\n  // if imagedata property is set/changes, draw it on the canvas\n  useEffect(() => {\n    if (imageData !== undefined) {\n      getContext().putImageData(imageData, 0, 0);\n    }\n  }, [imageData]);\n\n  return (\n    <Box m={2}>\n      <canvas ref={canvasRef} width={width} height={height} />\n    </Box>\n  );\n}\n\nCanvas.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  imageData: PropTypes.shape()\n};\n\nCanvas.defaultProps = {\n  imageData: undefined\n};\n\nexport default Canvas;\n","import React, { useState, useEffect } from 'react';\nimport Jimp from 'jimp/es';\nimport PropTypes from 'prop-types';\nimport { useDropzone } from 'react-dropzone';\nimport { Container, Box, Snackbar, Typography } from '@mui/material';\nimport { Alert } from '@mui/lab';\nimport Canvas from './Canvas';\n\n// Lets the user select an image file\n// When a valid image is selected, calls the \"onload\" callback with a JimpImage object.\nfunction ImageUpload(props) {\n  const { onload, imageData } = props;\n\n  const [error, setError] = useState(undefined);\n  const { acceptedFiles, fileRejections, getRootProps, getInputProps } = useDropzone({\n    accept: 'image/*',\n    maxFiles: 1\n  });\n\n  useEffect(() => {\n    const readFile = file => {\n      const reader = new FileReader();\n\n      reader.onabort = () => setError('file reading was aborted');\n      reader.onerror = () => setError('file reading has failed');\n      reader.onload = () => {\n        Jimp.read(reader.result)\n          .then(img => {\n            setError(undefined);\n            onload({ jimpImage: img, filename: file.name });\n          })\n          .catch(err => {\n            setError(err.message);\n          });\n      };\n      reader.readAsArrayBuffer(file);\n    };\n    if (acceptedFiles !== undefined && acceptedFiles.length === 1) {\n      readFile(acceptedFiles[0]);\n    }\n  }, [acceptedFiles, onload]);\n\n  useEffect(() => {\n    if (fileRejections !== undefined && fileRejections.length > 0) {\n      const rejectedFile = fileRejections[0];\n      const errorMessages = rejectedFile.errors.map(e => e.message).reduce((a, e) => `${a},${e}`);\n      setError(`Cannot load ${rejectedFile.file.path}: ${errorMessages}`);\n    }\n  }, [fileRejections]);\n\n  return (\n    <Container>\n      <Box border={0} m={1} boxShadow={2} borderRadius=\"borderRadius\" borderColor=\"textSecondary\">\n        <div {...getRootProps({ className: 'dropzone' })}>\n          <input {...getInputProps()} />\n          <Canvas width={320} height={200} imageData={imageData} />\n          <Typography color=\"textSecondary\" gutterBottom>\n            Drop image here, or click to browse\n          </Typography>\n        </div>\n      </Box>\n      <Snackbar open={error} autoHideDuration={6000} onClose={() => setError(undefined)}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Snackbar>\n    </Container>\n  );\n}\n\nImageUpload.propTypes = {\n  // callback when image is loaded successfully\n  onload: PropTypes.func.isRequired,\n  imageData: PropTypes.shape()\n};\n\nImageUpload.defaultProps = {\n  imageData: undefined\n};\nexport default ImageUpload;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Tooltip } from '@mui/material';\n\nfunction MyRadioButtons(props) {\n  const { label, value, items, onChange, tooltip } = props;\n\n  return (\n    <Tooltip title={tooltip}>\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\">{label}</FormLabel>\n        <RadioGroup\n          row\n          aria-label={label}\n          name={`select${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n        >\n          {items.map(i => (\n            <FormControlLabel key={i} value={i} control={<Radio />} label={i} />\n          ))}\n        </RadioGroup>\n      </FormControl>\n    </Tooltip>\n  );\n}\n\nMyRadioButtons.propTypes = {\n  label: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  items: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  onChange: PropTypes.func.isRequired,\n  tooltip: PropTypes.string.isRequired\n};\n\nMyRadioButtons.defaultProps = {\n  label: 'Choose'\n};\n\nexport default MyRadioButtons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox, FormControlLabel, Tooltip } from '@mui/material';\n\nfunction MyCheckbox(props) {\n  const { name, label, value, onChange, tooltip } = props;\n\n  return (\n    <Tooltip title={tooltip} arrow>\n      <FormControlLabel\n        control={\n          <Checkbox checked={value} onChange={event => onChange(event.target.checked)} name={`${name}Checkbox`} />\n        }\n        label={label}\n      />\n    </Tooltip>\n  );\n}\n\nMyCheckbox.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.bool.isRequired,\n  onChange: PropTypes.func.isRequired,\n  tooltip: PropTypes.string.isRequired\n};\n\nexport default MyCheckbox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Slider, Tooltip, FormLabel } from '@mui/material';\n\nfunction MySlider(props) {\n  const { label, value, min, max, step, onChange, tooltip, icon, disabled } = props;\n\n  return (\n    <>\n      <FormLabel component=\"legend\">{label}</FormLabel>\n      <Tooltip title={tooltip} arrow>\n        <Grid container>\n          <Grid item>{icon} &nbsp;</Grid>\n          <Grid item xs>\n            <Slider\n              min={min}\n              max={max}\n              step={step}\n              value={value}\n              onChange={(event, newValue) => onChange(newValue)}\n              valueLabelDisplay=\"auto\"\n              disabled={disabled}\n            />\n          </Grid>\n        </Grid>\n      </Tooltip>\n    </>\n  );\n}\n\nMySlider.propTypes = {\n  icon: PropTypes.node.isRequired,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.number.isRequired,\n  min: PropTypes.number,\n  max: PropTypes.number.isRequired,\n  step: PropTypes.number,\n  onChange: PropTypes.func.isRequired,\n  tooltip: PropTypes.string.isRequired,\n  disabled: PropTypes.bool\n};\n\nMySlider.defaultProps = {\n  min: 0,\n  step: 1,\n  disabled: false\n};\n\nexport default MySlider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Box, Tooltip } from '@mui/material';\nimport AutorenewIcon from '@mui/icons-material/Autorenew';\n\nfunction ResetButton(props) {\n  const { onClick, disabled } = props;\n\n  return (\n    <Box align=\"left\" m={2}>\n      <Tooltip title=\"Reset controls below to their default settings\" arrow>\n        <Button size=\"small\" variant=\"outlined\" disabled={disabled} startIcon={<AutorenewIcon />} onClick={onClick}>\n          defaults\n        </Button>\n      </Tooltip>\n    </Box>\n  );\n}\n\nResetButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nResetButton.defaultProps = {\n  disabled: false\n};\n\nexport default ResetButton;\n","import React, { useEffect, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport * as Jimp from 'jimp';\nimport { Container } from '@mui/material';\nimport Brightness5OutlinedIcon from '@mui/icons-material/Brightness5Outlined';\nimport Brightness6OutlinedIcon from '@mui/icons-material/Brightness6Outlined';\nimport BrokenImageOutlinedIcon from '@mui/icons-material/BrokenImageOutlined';\nimport BlurOnOutlinedIcon from '@mui/icons-material/BlurOnOutlined';\nimport { abbreviateFilename } from './Utilities';\nimport ImageUpload from './ImageUpload';\nimport MyRadioButtons from './MyRadioButtons';\nimport MyCheckbox from './MyCheckbox';\nimport MySlider from './MySlider';\nimport ResetButton from './ResetButton';\n\n// defaults\nconst normalizeDefault = true;\nconst greyscaleDefault = false;\nconst mirrorHorDefault = false;\nconst mirrorVerDefault = false;\nconst invertDefault = false;\nconst brightnessDefault = 0;\nconst contrastDefault = 0;\nconst blurDefault = 0;\nconst thresholdDefault = 0;\n\nfunction cropJimpImage(jimpImage) {\n  const isTooSmall = jimpImage.bitmap.width < 320 || jimpImage.bitmap.height < 200;\n  let blitImage;\n\n  // if the image is too small, the cropped image is cleared,\n  // and then the smaller image is blitted onto it\n  // this is a workaround for artifacts when cropping images to larger sizes\n  if (isTooSmall) {\n    blitImage = jimpImage.clone();\n  }\n  jimpImage.crop(0, 0, 320, 200);\n  if (blitImage !== undefined) {\n    this.clearJimpImage(jimpImage);\n    jimpImage.blit(blitImage, 0, 0);\n  }\n}\n\nfunction cropImage(image, scale) {\n  const newImage = image.clone();\n  if (scale === 'fill') {\n    newImage.cover(320, 200, Jimp.RESIZE_HERMITE);\n  } else if (scale === 'fit') {\n    newImage.contain(320, 200, Jimp.RESIZE_HERMITE);\n  } else {\n    cropJimpImage(newImage);\n  }\n  return newImage;\n}\n\nfunction getImageDataFromJimpImage(jimpImage) {\n  if (jimpImage === undefined) {\n    return undefined;\n  }\n\n  // TODO: Jimp does not seem to shrink the data array when resizing picture to a smaller size... Confirm?\n  const dataSize = jimpImage.bitmap.width * jimpImage.bitmap.height * 4;\n  let data;\n  if (jimpImage.bitmap.data.length > dataSize) {\n    data = jimpImage.bitmap.data.slice(0, dataSize);\n  } else {\n    data = jimpImage.bitmap.data;\n  }\n\n  return new ImageData(Uint8ClampedArray.from(data), jimpImage.bitmap.width, jimpImage.bitmap.height);\n}\n\nfunction ImageSource(props) {\n  const { onChanged } = props;\n\n  // the originally uploaded image\n  const [sourceImage, setSourceImage] = useState(undefined);\n\n  // the source image after cropping\n  const [croppedImage, setCroppedImage] = useState(undefined);\n\n  // the final processed image\n  const [image, setImage] = useState(undefined);\n\n  // the image data to show on the canvas\n  const [imageData, setImageData] = useState(undefined);\n\n  const [filename, setFilename] = useState('input');\n  const [scale, setScale] = useState('fill');\n  const [normalize, setNormalize] = useState(normalizeDefault);\n  const [greyscale, setGreyscale] = useState(greyscaleDefault);\n  const [mirrorHor, setMirrorHor] = useState(mirrorHorDefault);\n  const [mirrorVer, setMirrorVer] = useState(mirrorVerDefault);\n  const [invert, setInvert] = useState(invertDefault);\n  const [brightness, setBrightness] = useState(brightnessDefault);\n  const [contrast, setContrast] = useState(contrastDefault);\n  const [blur, setBlur] = useState(blurDefault);\n  const [threshold, setThreshold] = useState(thresholdDefault);\n\n  // memoize the callback to avoid re-rendering\n  const onLoadedCallback = useCallback(img => {\n    setSourceImage(img.jimpImage);\n    setFilename(img.filename);\n  }, []);\n\n  // reset all controls to default\n  const reset = useCallback(() => {\n    setNormalize(normalizeDefault);\n    setGreyscale(greyscaleDefault);\n    setMirrorHor(mirrorHorDefault);\n    setMirrorVer(mirrorVerDefault);\n    setInvert(invertDefault);\n    setBrightness(brightnessDefault);\n    setContrast(contrastDefault);\n    setBlur(blurDefault);\n    setThreshold(thresholdDefault);\n  }, []);\n\n  // if the processed image has changed, notify owner\n  useEffect(() => {\n    if (image !== undefined) {\n      onChanged({ jimpImage: image, filename });\n      setImageData(getImageDataFromJimpImage(image));\n    }\n  }, [image, onChanged, filename]);\n\n  // if the source image has changed, apply cropping\n  useEffect(() => {\n    if (sourceImage === undefined) {\n      return;\n    }\n    setCroppedImage(cropImage(sourceImage, scale));\n  }, [sourceImage, scale]);\n\n  // if the cropped image or any of the controls change, update the image\n  useEffect(() => {\n    if (croppedImage === undefined) {\n      return;\n    }\n    const newImage = croppedImage.clone();\n\n    if (greyscale) {\n      newImage.greyscale();\n    }\n    if (normalize) {\n      newImage.normalize();\n    }\n\n    newImage.brightness(brightness);\n    newImage.contrast(contrast);\n\n    if (blur > 0) {\n      newImage.blur(blur);\n    }\n\n    newImage.mirror(mirrorHor, mirrorVer);\n\n    if (invert) {\n      newImage.invert();\n    }\n\n    if (threshold > 0) {\n      newImage.threshold({ max: threshold, autoGreyscale: false });\n    }\n\n    setImage(newImage);\n  }, [croppedImage, normalize, brightness, contrast, greyscale, blur, mirrorHor, mirrorVer, invert, threshold]);\n\n  const defaultsSet =\n    normalize === normalizeDefault &&\n    greyscale === greyscaleDefault &&\n    mirrorHor === mirrorHorDefault &&\n    mirrorVer === mirrorVerDefault &&\n    invert === invertDefault &&\n    contrast === contrastDefault &&\n    brightness === brightnessDefault &&\n    blur === blurDefault &&\n    threshold === thresholdDefault;\n\n  return (\n    <>\n      <h4>{abbreviateFilename(filename, 30)}</h4>\n      <Container>\n        <ImageUpload imageData={imageData} onload={onLoadedCallback} />\n      </Container>\n      <Container align=\"left\">\n        <MyRadioButtons\n          label=\"cropping\"\n          items={['crop', 'fill', 'fit']}\n          value={scale}\n          onChange={setScale}\n          tooltip=\"Type of cropping to apply to source image\"\n        />\n      </Container>\n\n      <ResetButton onClick={reset} disabled={defaultsSet} />\n\n      <Container align=\"left\">\n        <MyCheckbox\n          name=\"normalize\"\n          label=\"normalize\"\n          value={normalize}\n          onChange={setNormalize}\n          tooltip=\"Stretch color intensities to their full range\"\n        />\n        <MyCheckbox\n          name=\"greyscale\"\n          label=\"greyscale\"\n          value={greyscale}\n          onChange={setGreyscale}\n          tooltip=\"Convert to black and white\"\n        />\n        <MyCheckbox name=\"invert\" label=\"invert\" value={invert} onChange={v => setInvert(v)} tooltip=\"Invert colors\" />\n        <MyCheckbox\n          name=\"mirrorHor\"\n          label=\"flip horizontal\"\n          value={mirrorHor}\n          onChange={setMirrorHor}\n          tooltip=\"Mirror image horizontally\"\n        />\n        <MyCheckbox\n          name=\"mirrorVer\"\n          label=\"flip vertical\"\n          value={mirrorVer}\n          onChange={setMirrorVer}\n          tooltip=\"Mirror image vertically\"\n        />\n        <MySlider\n          label=\"brightness\"\n          value={brightness}\n          min={-1.0}\n          max={1.0}\n          step={0.05}\n          onChange={setBrightness}\n          tooltip=\"Adjust image brightness\"\n          icon={<Brightness5OutlinedIcon />}\n        />\n        <MySlider\n          label=\"contrast\"\n          value={contrast}\n          min={-1.0}\n          max={1.0}\n          step={0.05}\n          onChange={setContrast}\n          tooltip=\"Adjust image contrast\"\n          icon={<Brightness6OutlinedIcon />}\n        />\n        <MySlider\n          label=\"blur\"\n          value={blur}\n          max={10}\n          onChange={setBlur}\n          tooltip=\"Blur image by this many pixels\"\n          icon={<BlurOnOutlinedIcon />}\n        />\n        <MySlider\n          label=\"threshold\"\n          value={threshold}\n          max={255}\n          onChange={setThreshold}\n          tooltip=\"Convert to black and white and remove pixels below this intensity threshold. (0 = off)\"\n          icon={<BrokenImageOutlinedIcon />}\n        />\n      </Container>\n    </>\n  );\n}\n\nImageSource.propTypes = {\n  onChanged: PropTypes.func.isRequired\n};\n\nexport default ImageSource;\n","import React, { useEffect, useState } from 'react';\nimport { ColorSpaces, Quantizer, Converter, GraphicModes, Palettes, OrderedDither } from 'retropixels-core';\nimport PropTypes from 'prop-types';\nimport Canvas from './Canvas';\nimport { getImageDataFromPixelImage } from './Utilities';\n\nconst graphicMode = GraphicModes.all.bitmap;\n\n// resize JIMP image to the size needed for conversion to a pixelImage\nfunction resizeToTargetSize(jimpImage, pixelImage) {\n  const result = jimpImage.clone();\n  result.resize(pixelImage.mode.width, pixelImage.mode.height);\n  return result;\n}\n\nfunction RetropixelsImage(props) {\n  const { jimpImage, onChanged, hires, nomaps, colorspaceId, palette, ditherId, ditherRadius } = props;\n\n  const defaultQuantizer = new Quantizer(palette, ColorSpaces.all[colorspaceId]);\n  const defaultConverter = new Converter(defaultQuantizer);\n  const defaultDitherer = new OrderedDither(OrderedDither.presets[ditherId], ditherRadius);\n\n  const [pixelImage, setPixelImage] = useState(undefined);\n  const [imageData, setImageData] = useState(undefined);\n\n  const [converter, setConverter] = useState(defaultConverter);\n  const [ditherer, setDitherer] = useState(defaultDitherer);\n\n  useEffect(() => {\n    const quantizer = new Quantizer(palette, ColorSpaces.all[colorspaceId]);\n    setConverter(new Converter(quantizer));\n  }, [colorspaceId, palette]);\n\n  useEffect(() => {\n    setDitherer(new OrderedDither(OrderedDither.presets[ditherId], ditherRadius));\n  }, [ditherId, ditherRadius]);\n\n  useEffect(() => {\n    if (jimpImage === undefined) {\n      return;\n    }\n\n    const newPixelImage = graphicMode({ hires, nomaps });\n    const resizedImage = resizeToTargetSize(jimpImage, newPixelImage);\n    ditherer.dither(resizedImage.bitmap);\n    setPixelImage(newPixelImage);\n    converter.convert(resizedImage.bitmap, newPixelImage);\n    setPixelImage(newPixelImage);\n  }, [jimpImage, hires, nomaps, converter, ditherer]);\n\n  useEffect(() => {\n    setImageData(getImageDataFromPixelImage(pixelImage, palette));\n    onChanged(pixelImage);\n  }, [pixelImage, onChanged, palette]);\n\n  return <Canvas width={320} height={200} imageData={imageData} />;\n}\n\nRetropixelsImage.propTypes = {\n  jimpImage: PropTypes.shape(),\n  onChanged: PropTypes.func,\n  hires: PropTypes.bool,\n  nomaps: PropTypes.bool,\n  colorspaceId: PropTypes.string,\n  palette: PropTypes.shape(),\n  ditherId: PropTypes.string,\n  ditherRadius: PropTypes.number\n};\n\nRetropixelsImage.defaultProps = {\n  jimpImage: undefined,\n  onChanged: () => {},\n  hires: false,\n  nomaps: false,\n  colorspaceId: 'xyz',\n  palette: Palettes.all.colodore,\n  ditherId: 'bayer4x4',\n  ditherRadius: 32\n};\n\nexport default RetropixelsImage;\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox, Grid, List, ListItem, ListItemIcon, Container, Box } from '@mui/material';\nimport { Palettes } from 'retropixels-core';\nimport Brightness1Icon from '@mui/icons-material/Brightness1';\nimport MyRadioButtons from './MyRadioButtons';\nimport ResetButton from './ResetButton';\n\nconst paletteOptions = ['PALette', 'colodore', 'pepto'];\nconst paletteIdDefault = 'PALette';\n\nconst enabledDefault = {\n  0: true,\n  1: true,\n  2: true,\n  3: true,\n  4: true,\n  5: true,\n  6: true,\n  7: true,\n  8: true,\n  9: true,\n  10: true,\n  11: true,\n  12: true,\n  13: true,\n  14: true,\n  15: true\n};\n\nfunction PaletteControl(props) {\n  const { onChange } = props;\n\n  const [paletteId, setPaletteId] = useState(paletteIdDefault);\n  const [palette, setPalette] = useState(Palettes.all[paletteId]);\n  const [enabledMap, setEnabledMap] = useState(enabledDefault);\n\n  const enabledColors = useMemo(() => Object.keys(enabledMap).filter(k => enabledMap[k]), [enabledMap]);\n\n  useEffect(() => {\n    const newPalette = { ...Palettes.all[paletteId] };\n    newPalette.enabled = enabledColors;\n    setPalette(newPalette);\n  }, [paletteId, enabledColors]);\n\n  useEffect(() => {\n    onChange(palette);\n  }, [palette, onChange]);\n\n  const defaultsSet = enabledColors.length === palette.colors.length && paletteId === paletteIdDefault;\n\n  const reset = useCallback(() => {\n    setEnabledMap(enabledDefault);\n    setPaletteId(paletteIdDefault);\n  }, []);\n\n  function onChanged(index) {\n    return () => {\n      const newValue = !enabledMap[index];\n      if (!newValue && enabledColors.length <= 1) {\n        return;\n      }\n      const newEnabledMap = { ...enabledMap };\n      newEnabledMap[index] = newValue;\n      setEnabledMap(newEnabledMap);\n    };\n  }\n\n  function subPalette(startIndex) {\n    const result = [];\n    for (let i = startIndex; i < startIndex + 8; i += 1) {\n      const [r, g, b] = palette.colors[i];\n      const id = `${r}${g}${b}`;\n      result.push(\n        <ListItem key={id}>\n          <ListItemIcon>\n            <Checkbox checked={enabledMap[i]} onChange={onChanged(i)} name={`${id}cb`} />\n          </ListItemIcon>\n          <Box boxShadow={1} borderRadius=\"borderRadius\">\n            <Brightness1Icon fontSize=\"small\" style={{ color: `rgb(${r}, ${g}, ${b})` }} />\n          </Box>\n        </ListItem>\n      );\n    }\n    return result;\n  }\n\n  return (\n    <Grid container>\n      <Grid item xs={12} align=\"left\">\n        <ResetButton onClick={reset} disabled={defaultsSet} />\n        <Container align=\"left\">\n          <MyRadioButtons\n            label=\"palette\"\n            value={paletteId}\n            items={paletteOptions}\n            onChange={setPaletteId}\n            tooltip=\"Use this palette for quantizing\"\n          />\n        </Container>\n      </Grid>\n      <Grid item xs={6}>\n        <List dense>{subPalette(0)}</List>\n      </Grid>\n      <Grid item xs={6}>\n        <List dense>{subPalette(8)}</List>\n      </Grid>\n    </Grid>\n  );\n}\n\nPaletteControl.propTypes = {\n  onChange: PropTypes.func.isRequired\n};\n\nexport default PaletteControl;\n","import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Container, Tooltip, Grid } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport BlurLinearIcon from '@mui/icons-material/BlurLinear';\nimport CloudDownloadIcon from '@mui/icons-material/CloudDownload';\nimport { C64Writer, Palettes } from 'retropixels-core';\nimport { saveAs } from 'file-saver';\nimport Jimp from 'jimp/es';\nimport { parseFilename, getImageDataFromPixelImage } from './Utilities';\nimport MyRadioButtons from './MyRadioButtons';\nimport RetropixelsImage from './RetropixelsImage';\nimport MyCheckbox from './MyCheckbox';\nimport MySlider from './MySlider';\nimport ResetButton from './ResetButton';\nimport PaletteControl from './PaletteControl';\n\n// options\nconst ditherOptions = ['none', 'bayer2x2', 'bayer4x4', 'bayer8x8'];\nconst colorspaceOptions = ['rgb', 'yuv', 'xyz', 'rainbow'];\n\n// defaults\nconst ditherDefault = 'bayer4x4';\nconst paletteDefault = Palettes.all.colodore;\nconst colorspaceDefault = 'xyz';\nconst hiresDefault = false;\nconst nomapsDefault = false;\nconst ditherRadiusDefault = 32;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  }\n}));\n\nfunction getDefaultExtension(pixelImage) {\n  return pixelImage.mode.pixelWidth === 1 ? '.art' : '.kla';\n}\n\nfunction saveOutput(pixelImage, filename) {\n  const binary = C64Writer.toBinary(pixelImage);\n  const buffer = C64Writer.toBuffer(binary);\n  const blob = new Blob([buffer], { type: 'application/octet-stream' });\n  saveAs(blob, filename);\n}\n\nfunction savePNG(pixelImage, palette, filename) {\n  const width = pixelImage.mode.width * pixelImage.mode.pixelWidth;\n  const { height } = pixelImage.mode;\n  /* eslint-disable no-new */\n  new Jimp(width, height, (err, image) => {\n    /* eslint-enable no-new */\n    if (err) {\n      throw err;\n    }\n\n    const imageData = getImageDataFromPixelImage(pixelImage, palette);\n    // it seems we can just replace the underlying data of the Jimp image\n    image.bitmap.width = imageData.width;\n    image.bitmap.height = imageData.height;\n    image.bitmap.data = imageData.data;\n\n    image.getBufferAsync(Jimp.MIME_PNG).then(buffer => {\n      const blob = new Blob([buffer], { type: 'application/octet-stream' });\n      saveAs(blob, filename);\n    });\n  });\n}\n\nfunction Retropixels(props) {\n  const { jimpImage, filename } = props;\n\n  const [pixelImage, setPixelImage] = useState(undefined);\n  const [colorspace, setColorSpace] = useState(colorspaceDefault);\n  const [palette, setPalette] = useState(paletteDefault);\n  const [hires, setHires] = useState(hiresDefault);\n  const [nomaps, setNomaps] = useState(nomapsDefault);\n  const [dither, setDither] = useState(ditherDefault);\n  const [ditherRadius, setDitherRadius] = useState(ditherRadiusDefault);\n\n  // memoize the callbacks to avoid re-renders\n  const paletteCallback = useCallback(p => setPalette(p), []);\n  const newPixelImageCallback = useCallback(i => setPixelImage(i), []);\n\n  let c64OutputFilename = 'output';\n  let pngOutputFilename;\n  if (pixelImage !== undefined) {\n    const extension = getDefaultExtension(pixelImage);\n    const parsedFilename = parseFilename(filename);\n    c64OutputFilename = `${parsedFilename.basename}${extension}`;\n    pngOutputFilename = `${parsedFilename.basename}.png`;\n  }\n\n  const reset = useCallback(() => {\n    setColorSpace(colorspaceDefault);\n    setHires(hiresDefault);\n    setNomaps(nomapsDefault);\n    setDither(ditherDefault);\n    setDitherRadius(ditherRadiusDefault);\n  }, []);\n\n  let outputFormat = 'output';\n  if (pixelImage !== undefined) {\n    outputFormat = pixelImage.mode.pixelWidth === 1 ? 'art studio' : 'koala painter';\n  }\n\n  const defaultsSet =\n    colorspace === colorspaceDefault &&\n    hires === hiresDefault &&\n    nomaps === nomapsDefault &&\n    dither === ditherDefault &&\n    ditherRadius === ditherRadiusDefault;\n\n  const classes = useStyles();\n\n  return (\n    <Grid container>\n      <Grid item xs={12} sm={12} md={6}>\n        <h4>{c64OutputFilename}</h4>\n        <Container>\n          <RetropixelsImage\n            jimpImage={jimpImage}\n            onChanged={newPixelImageCallback}\n            hires={hires}\n            nomaps={nomaps}\n            colorspaceId={colorspace}\n            palette={palette}\n            ditherId={dither}\n            ditherRadius={ditherRadius}\n          />\n        </Container>\n        <Container align=\"left\" className={classes.root}>\n          <Tooltip title={`Download the image as ${outputFormat} file`} arrow>\n            <Button\n              sx={{ marginRight: '2em' }}\n              variant=\"contained\"\n              disabled={pixelImage === undefined}\n              color=\"primary\"\n              startIcon={<CloudDownloadIcon />}\n              onClick={() => saveOutput(pixelImage, c64OutputFilename)}\n            >\n              {outputFormat}\n            </Button>\n          </Tooltip>\n          <Tooltip title=\"Download the image\" arrow>\n            <Button\n              variant=\"contained\"\n              disabled={pixelImage === undefined}\n              color=\"primary\"\n              startIcon={<CloudDownloadIcon />}\n              onClick={() => savePNG(pixelImage, palette, pngOutputFilename)}\n            >\n              Image\n            </Button>\n          </Tooltip>\n        </Container>\n        <ResetButton onClick={reset} disabled={defaultsSet} />\n        <Container align=\"left\">\n          <MyCheckbox\n            name=\"hires\"\n            label=\"hires\"\n            value={hires}\n            onChange={setHires}\n            tooltip=\"Use high resolution mode instead of multi color\"\n          />\n          <MyCheckbox\n            name=\"nomaps\"\n            label=\"single color layers\"\n            value={nomaps}\n            onChange={setNomaps}\n            tooltip=\"Restrict each attribute layer to a single color\"\n          />\n        </Container>\n        <Container align=\"left\">\n          <MyRadioButtons\n            label=\"colorspace\"\n            value={colorspace}\n            items={colorspaceOptions}\n            onChange={setColorSpace}\n            tooltip=\"Convert colors to this color space before quantizing\"\n          />\n          <MyRadioButtons\n            label=\"dithering\"\n            value={dither}\n            items={ditherOptions}\n            onChange={setDither}\n            tooltip=\"Type of dithering to apply\"\n          />\n          <MySlider\n            label=\"dithering strength\"\n            value={ditherRadius}\n            max={64}\n            onChange={setDitherRadius}\n            tooltip=\"Strength of dithering\"\n            icon={<BlurLinearIcon />}\n            disabled={dither === 'none'}\n          />\n        </Container>\n      </Grid>\n      <Grid item xs>\n        <h4>palette</h4>\n        <PaletteControl onChange={paletteCallback} />\n      </Grid>\n    </Grid>\n  );\n}\n\nRetropixels.propTypes = {\n  jimpImage: PropTypes.shape(),\n  filename: PropTypes.string\n};\n\nRetropixels.defaultProps = {\n  jimpImage: undefined,\n  filename: 'output'\n};\n\nexport default Retropixels;\n","export default __webpack_public_path__ + \"static/media/logo.42e2fcaf.svg\";","export default {buildnr: '2022-06-14.80eabec', url: 'https://github.com/micheldebree/retropixels/commit/80eabecf3855da4ac5bd59da171f4ea9dfbe2a85'}\n","import React, { useCallback, useState } from 'react';\nimport { Grid, AppBar, Toolbar, Typography, Button, Link, Container } from '@mui/material';\nimport './App.css';\nimport GitHubIcon from '@mui/icons-material/GitHub';\nimport { makeStyles } from '@mui/styles';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport ImageSource from './ImageSource';\nimport Retropixels from './Retropixels';\nimport Logo from './logo.svg';\nimport AppVersion from './version';\n\nconst theme = createTheme();\n// https://github.com/harishmahamure/photoCompress\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nfunction App() {\n  const [sourceImage, setSourceImage] = useState(undefined);\n  const [filename, setFilename] = useState(undefined);\n\n  const classes = useStyles();\n\n  const onSourceImageChanged = useCallback(\n    newSourceImage => {\n      setSourceImage(newSourceImage.jimpImage);\n      setFilename(newSourceImage.filename);\n    },\n    [setSourceImage, setFilename]\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <div className={classes.root}>\n          <AppBar position=\"static\">\n            <Toolbar variant=\"dense\">\n              <img src={Logo} alt=\"Logo\" className=\"logo\" />\n              <Typography variant=\"h6\" className={classes.title} align=\"left\">\n                Retropixels\n              </Typography>\n              <Link href={AppVersion.url} color=\"inherit\" variant=\"body2\">\n                v{AppVersion.buildnr}\n              </Link>\n              <Button color=\"inherit\" href=\"https://github.com/micheldebree/retropixels\">\n                <GitHubIcon />\n              </Button>\n            </Toolbar>\n          </AppBar>\n        </div>\n        <Container align=\"left\">\n          <Typography variant=\"overline\">\n            Convert images to <Link href=\"https://en.wikipedia.org/wiki/Commodore_64\">Commodore 64</Link> format\n          </Typography>\n        </Container>\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={6} md={4}>\n            <ImageSource onChanged={onSourceImageChanged} />\n          </Grid>\n          <Grid item xs={12} sm={6} md={8}>\n            <Retropixels jimpImage={sourceImage} filename={filename} />\n          </Grid>\n        </Grid>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}