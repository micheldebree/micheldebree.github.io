{"version":3,"sources":["Utilities.js","Canvas.jsx","ImageUpload.jsx","ProfileSelection.jsx","MyCheckbox.jsx","MySlider.jsx","ResetButton.jsx","ImagePreProcessor.jsx","TargetImage.jsx","PaletteControl.jsx","Retropixels.jsx","logo.svg","version.js","App.jsx","reportWebVitals.js","index.jsx"],"names":["getImageDataFromJimpImage","jimpImage","undefined","data","dataSize","bitmap","width","height","length","slice","ImageData","Uint8ClampedArray","from","parseFilename","filename","periodPos","lastIndexOf","extension","substring","basename","Math","min","abbreviateFilename","maxSize","parsed","Canvas","props","canvasRef","React","useRef","imageData","useEffect","current","getContext","putImageData","Box","m","ref","defaultProps","ImageUpload","onload","useState","error","setError","useDropzone","accept","maxFiles","acceptedFiles","fileRejections","getRootProps","getInputProps","file","reader","FileReader","onabort","onerror","Jimp","read","result","then","img","name","catch","err","message","readAsArrayBuffer","readFile","rejectedFile","errorMessages","errors","map","e","reduce","a","path","Container","border","boxShadow","borderRadius","borderColor","className","Typography","color","gutterBottom","Snackbar","open","autoHideDuration","onClose","Alert","severity","ProfileSelection","label","value","items","onChange","tooltip","Tooltip","title","FormControl","component","FormLabel","RadioGroup","row","aria-label","event","target","i","FormControlLabel","control","Radio","MyCheckbox","arrow","Checkbox","checked","MySlider","max","step","icon","disabled","Grid","container","item","xs","Slider","newValue","valueLabelDisplay","ResetButton","onClick","align","Button","size","variant","startIcon","ImagePreProcessor","onChanged","normalizeDefault","greyscaleDefault","mirrorHorDefault","mirrorVerDefault","invertDefault","sourceImage","setSourceImage","croppedImage","setCroppedImage","image","setImage","setImageData","setFilename","scale","setScale","normalize","setNormalize","greyscale","setGreyscale","mirrorHor","setMirrorHor","mirrorVer","setMirrorVer","invert","setInvert","brightness","setBrightness","contrast","setContrast","blur","setBlur","threshold","setThreshold","onLoadedCallback","useCallback","newImage","clone","cover","contain","blitImage","crop","this","clearJimpImage","blit","cropJimpImage","mirror","autoGreyscale","defaultsSet","v","TargetImage","graphicMode","GraphicModes","all","hires","nomaps","colorspaceId","palette","ditherId","ditherRadius","defaultQuantizer","Quantizer","ColorSpaces","defaultConverter","Converter","defaultDitherer","OrderedDither","presets","pixelImage","setPixelImage","quantizer","setQuantizer","converter","setConverter","ditherer","setDitherer","newPixelImage","resizedImage","resize","mode","dither","opaque","convert","imageWidth","pixelWidth","y","x","paletteIndex","peek","pixelValue","Palettes","colodore","colors","xx","index","r","g","b","getImageDataFromPixelImage","paletteOptions","paletteIdDefault","PaletteControl","enabledDefault","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","paletteId","setPaletteId","setPalette","enabledMap","setEnabledMap","enabledColors","push","newPalette","enabled","nrEnabled","Object","values","filter","newEnabledMap","subPalette","startIndex","id","ListItem","ListItemIcon","fontSize","style","List","dense","ditherOptions","colorspaceOptions","ditherDefault","paletteDefault","colorspaceDefault","hiresDefault","nomapsDefault","Retropixels","colorspace","setColorSpace","setHires","setNomaps","setDither","setDitherRadius","paletteCallback","p","targetFilename","parsedFilename","outputFormat","binary","C64Writer","toBinary","buffer","toBuffer","blob","Blob","type","saveAs","saveOutput","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","App","classes","AppBar","position","Toolbar","src","Logo","alt","Link","href","AppVersion","newSourceImage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a32f7f00.chunk.js","sourcesContent":["import { ColorSpaces, Quantizer, Converter, GraphicModes, Palettes } from 'retropixels-core';\n\nexport function convertJimpImageToPixelImage(jimpImage) {\n  if (jimpImage === undefined) {\n    return undefined;\n  }\n  const palette = Palettes.all.colodore;\n  const colorspace = ColorSpaces.all.xyz;\n  const quantizer = new Quantizer(palette, colorspace);\n  const converter = new Converter(quantizer);\n\n  const graphicMode = GraphicModes.all.bitmap;\n  const result = graphicMode({});\n\n  converter.convert(jimpImage.bitmap, result);\n  return result;\n}\n\nexport function getImageDataFromJimpImage(jimpImage) {\n  if (jimpImage === undefined) {\n    return undefined;\n  }\n\n  // TODO: Jimp does not seem to shrink the data array when resizing picture to a smaller size... Confirm?\n  const dataSize = jimpImage.bitmap.width * jimpImage.bitmap.height * 4;\n  let data;\n  if (jimpImage.bitmap.data.length > dataSize) {\n    data = jimpImage.bitmap.data.slice(0, dataSize);\n  } else {\n    data = jimpImage.bitmap.data;\n  }\n\n  return jimpImage !== undefined\n    ? new ImageData(Uint8ClampedArray.from(data), jimpImage.bitmap.width, jimpImage.bitmap.height)\n    : undefined;\n}\n\nexport function cropJimpImage(jimpImage) {\n  const isTooSmall = jimpImage.bitmap.width < 320 || jimpImage.bitmap.height < 200;\n  let blitImage;\n\n  // if the image is too small, the cropped image is cleared,\n  // and then the smaller image is blitted onto it\n  // this is a workaround for artifacts when cropping images to larger sizes\n  if (isTooSmall) {\n    blitImage = jimpImage.clone();\n  }\n  jimpImage.crop(0, 0, 320, 200);\n  if (blitImage !== undefined) {\n    this.clearJimpImage(jimpImage);\n    jimpImage.blit(blitImage, 0, 0);\n  }\n}\n\nexport function clearJimpImage(jimpImage) {\n  jimpImage.scan(0, 0, jimpImage.bitmap.width, jimpImage.bitmap.height, (x, y, idx) => {\n    jimpImage.bitmap.data[idx + 0] = 0;\n    jimpImage.bitmap.data[idx + 1] = 0;\n    jimpImage.bitmap.data[idx + 2] = 0;\n    jimpImage.bitmap.data[idx + 3] = 0;\n  });\n}\n\nexport function getImageDataFromPixelImage(pixelImage) {\n  if (pixelImage === undefined) {\n    return new ImageData(1, 1);\n  }\n  const imageWidth = pixelImage.mode.width * pixelImage.mode.pixelWidth;\n  const imageData = new ImageData(imageWidth, pixelImage.mode.height);\n  for (let y = 0; y < pixelImage.mode.height; y += 1) {\n    for (let x = 0; x < pixelImage.mode.width; x += 1) {\n      const paletteIndex = pixelImage.peek(x, y);\n      const pixelValue = paletteIndex !== undefined ? Palettes.all.colodore.colors[paletteIndex] : [0, 0, 0, 0];\n      for (let xx = 0; xx < pixelImage.mode.pixelWidth; xx += 1) {\n        const index = y * 4 * imageWidth + x * pixelImage.mode.pixelWidth * 4 + xx * 4;\n        const [r, g, b] = pixelValue;\n        imageData.data[index] = r;\n        imageData.data[index + 1] = g;\n        imageData.data[index + 2] = b;\n        imageData.data[index + 3] = 0xff;\n      }\n    }\n  }\n  return imageData;\n}\n\nexport function parseFilename(filename) {\n  const periodPos = filename.lastIndexOf('.');\n  const extension = filename.substring(periodPos + 1, filename.length);\n  const basename = filename.substring(0, Math.min(30, periodPos));\n  return { basename, extension };\n}\n\nexport function abbreviateFilename(filename, maxSize) {\n  if (filename.length <= maxSize) {\n    return filename;\n  }\n  const parsed = parseFilename(filename);\n  return `${parsed.basename.substring(0, maxSize)}...${parsed.extension}`;\n}\n\nexport default {\n  getImageDataFromJimpImage\n};\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from '@material-ui/core';\n\n// https://blog.koenvangilst.nl/react-hooks-with-canvas/\n// https://www.w3schools.com/Tags/canvas_putimagedata.asp\n\nfunction Canvas(props) {\n  const canvasRef = React.useRef(null);\n  const getContext = () => canvasRef.current.getContext('2d');\n\n  const { width, height, imageData } = props;\n\n  // if imagedata property is set/changes, draw it on the canvas\n  useEffect(() => {\n    if (imageData !== undefined) {\n      getContext().putImageData(imageData, 0, 0);\n    }\n  }, [imageData]);\n\n  return (\n    <Box m={1}>\n      <canvas ref={canvasRef} width={width} height={height} />\n    </Box>\n  );\n}\n\n// TODO: get width and height from imagedata\nCanvas.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  imageData: PropTypes.shape()\n};\n\nCanvas.defaultProps = {\n  imageData: undefined\n};\n\nexport default Canvas;\n","import React, { useState, useEffect } from 'react';\nimport Jimp from 'jimp/es';\nimport PropTypes from 'prop-types';\nimport { useDropzone } from 'react-dropzone';\nimport { Container, Box, Snackbar, Typography } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport Canvas from './Canvas';\n\n// Lets the user select an image file\n// When a valid image is selected, calls the \"onload\" callback with a JimpImage object.\nfunction ImageUpload(props) {\n  const { onload, imageData } = props;\n\n  const [error, setError] = useState(undefined);\n  const { acceptedFiles, fileRejections, getRootProps, getInputProps } = useDropzone({\n    accept: 'image/*',\n    maxFiles: 1\n  });\n\n  useEffect(() => {\n    const readFile = file => {\n      const reader = new FileReader();\n\n      reader.onabort = () => setError('file reading was aborted');\n      reader.onerror = () => setError('file reading has failed');\n      reader.onload = () => {\n        Jimp.read(reader.result)\n          .then(img => {\n            setError(undefined);\n            onload({ jimpImage: img, filename: file.name });\n          })\n          .catch(err => {\n            setError(err.message);\n          });\n      };\n      reader.readAsArrayBuffer(file);\n    };\n    if (acceptedFiles !== undefined && acceptedFiles.length === 1) {\n      readFile(acceptedFiles[0]);\n    }\n  }, [acceptedFiles, onload]);\n\n  useEffect(() => {\n    if (fileRejections !== undefined && fileRejections.length > 0) {\n      const rejectedFile = fileRejections[0];\n      const errorMessages = rejectedFile.errors.map(e => e.message).reduce((a, e) => `${a},${e}`);\n      setError(`Cannot load ${rejectedFile.file.path}: ${errorMessages}`);\n    }\n  }, [fileRejections]);\n\n  return (\n    <Container>\n      <Box border={0} m={1} boxShadow={2} borderRadius=\"borderRadius\" borderColor=\"textSecondary\">\n        <div {...getRootProps({ className: 'dropzone' })}>\n          <input {...getInputProps()} />\n          <Canvas width={320} height={200} imageData={imageData} />\n          <Typography color=\"textSecondary\" gutterBottom>\n            Drop image here, or click to browse\n          </Typography>\n        </div>\n      </Box>\n      <Snackbar open={error} autoHideDuration={6000} onClose={() => setError(undefined)}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Snackbar>\n    </Container>\n  );\n}\n\nImageUpload.propTypes = {\n  // callback when image is loaded successfully\n  onload: PropTypes.func.isRequired,\n  imageData: PropTypes.shape()\n};\n\nImageUpload.defaultProps = {\n  imageData: undefined\n};\nexport default ImageUpload;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Tooltip } from '@material-ui/core';\n\nfunction ProfileSelection(props) {\n  const { label, value, items, onChange, tooltip } = props;\n\n  return (\n    <Tooltip title={tooltip}>\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\">{label}</FormLabel>\n        <RadioGroup\n          row\n          aria-label={label}\n          name={`select${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n        >\n          {items.map(i => (\n            <FormControlLabel key={i} value={i} control={<Radio />} label={i} />\n          ))}\n        </RadioGroup>\n      </FormControl>\n    </Tooltip>\n  );\n}\n\nProfileSelection.propTypes = {\n  label: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  items: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  onChange: PropTypes.func.isRequired,\n  tooltip: PropTypes.string.isRequired\n};\n\nProfileSelection.defaultProps = {\n  label: 'Choose'\n};\n\nexport default ProfileSelection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox, FormControlLabel, Tooltip } from '@material-ui/core';\n\nfunction MyCheckbox(props) {\n  const { name, label, value, onChange, tooltip } = props;\n\n  return (\n    <Tooltip title={tooltip} arrow>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={value}\n            onChange={() => {\n              onChange(!value);\n            }}\n            name={`${name}Checkbox`}\n          />\n        }\n        label={label}\n      />\n    </Tooltip>\n  );\n}\n\nMyCheckbox.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.bool.isRequired,\n  onChange: PropTypes.func.isRequired,\n  tooltip: PropTypes.string.isRequired\n};\n\nexport default MyCheckbox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Slider, Tooltip, FormLabel } from '@material-ui/core';\n\nfunction MySlider(props) {\n  const { label, value, min, max, step, onChange, tooltip, icon, disabled } = props;\n\n  return (\n    <>\n      <FormLabel component=\"legend\">{label}</FormLabel>\n      <Tooltip title={tooltip} arrow>\n        <Grid container>\n          <Grid item>{icon} &nbsp;</Grid>\n          <Grid item xs>\n            <Slider\n              min={min}\n              max={max}\n              step={step}\n              value={value}\n              onChange={(event, newValue) => onChange(newValue)}\n              valueLabelDisplay=\"auto\"\n              disabled={disabled}\n            />\n          </Grid>\n        </Grid>\n      </Tooltip>\n    </>\n  );\n}\n\nMySlider.propTypes = {\n  icon: PropTypes.node.isRequired,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.number.isRequired,\n  min: PropTypes.number,\n  max: PropTypes.number.isRequired,\n  step: PropTypes.number,\n  onChange: PropTypes.func.isRequired,\n  tooltip: PropTypes.string.isRequired,\n  disabled: PropTypes.bool\n};\n\nMySlider.defaultProps = {\n  min: 0,\n  step: 1,\n  disabled: false\n};\n\nexport default MySlider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Box, Tooltip } from '@material-ui/core';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\n\nfunction ResetButton(props) {\n  const { onClick, disabled } = props;\n\n  return (\n    <Box align=\"left\" m={2}>\n      <Tooltip title=\"Reset controls below to their default settings\" arrow>\n        <Button size=\"small\" variant=\"outlined\" disabled={disabled} startIcon={<AutorenewIcon />} onClick={onClick}>\n          defaults\n        </Button>\n      </Tooltip>\n    </Box>\n  );\n}\n\nResetButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nResetButton.defaultProps = {\n  disabled: false\n};\n\nexport default ResetButton;\n","import React, { useEffect, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport * as Jimp from 'jimp';\nimport { Container } from '@material-ui/core';\nimport Brightness5OutlinedIcon from '@material-ui/icons/Brightness5Outlined';\nimport Brightness6OutlinedIcon from '@material-ui/icons/Brightness6Outlined';\nimport BrokenImageOutlinedIcon from '@material-ui/icons/BrokenImageOutlined';\nimport BlurOnOutlinedIcon from '@material-ui/icons/BlurOnOutlined';\nimport { getImageDataFromJimpImage, cropJimpImage, abbreviateFilename } from './Utilities';\nimport ImageUpload from './ImageUpload';\nimport ProfileSelection from './ProfileSelection';\nimport MyCheckbox from './MyCheckbox';\nimport MySlider from './MySlider';\nimport ResetButton from './ResetButton';\n\nfunction ImagePreProcessor(props) {\n  const { onChanged } = props;\n\n  // defaults\n\n  const normalizeDefault = true;\n  const greyscaleDefault = false;\n  const mirrorHorDefault = false;\n  const mirrorVerDefault = false;\n  const invertDefault = false;\n  const brightnessDefault = 0;\n  const contrastDefault = 0;\n  const blurDefault = 0;\n  const thresholdDefault = 0;\n\n  // the originally uploaded image\n  const [sourceImage, setSourceImage] = useState(undefined);\n\n  // the source image after cropping\n  const [croppedImage, setCroppedImage] = useState(undefined);\n\n  // the final processed image\n  const [image, setImage] = useState(undefined);\n\n  // the image data to show on the canvas\n  const [imageData, setImageData] = useState(undefined);\n\n  const [filename, setFilename] = useState('input');\n  const [scale, setScale] = useState('fill');\n  const [normalize, setNormalize] = useState(normalizeDefault);\n  const [greyscale, setGreyscale] = useState(greyscaleDefault);\n  const [mirrorHor, setMirrorHor] = useState(mirrorHorDefault);\n  const [mirrorVer, setMirrorVer] = useState(mirrorVerDefault);\n  const [invert, setInvert] = useState(invertDefault);\n  const [brightness, setBrightness] = useState(brightnessDefault);\n  const [contrast, setContrast] = useState(contrastDefault);\n  const [blur, setBlur] = useState(blurDefault);\n  const [threshold, setThreshold] = useState(thresholdDefault);\n\n  // memoize the callback to avoid re-rendering\n  const onLoadedCallback = useCallback(img => {\n    setSourceImage(img.jimpImage);\n    setFilename(img.filename);\n  }, []);\n\n  function reset() {\n    setNormalize(normalizeDefault);\n    setGreyscale(greyscaleDefault);\n    setMirrorHor(mirrorHorDefault);\n    setMirrorVer(mirrorVerDefault);\n    setInvert(invertDefault);\n    setBrightness(brightnessDefault);\n    setContrast(contrastDefault);\n    setBlur(blurDefault);\n    setThreshold(thresholdDefault);\n  }\n\n  // if the processed image has changed, notify owner\n  useEffect(() => {\n    if (image !== undefined) {\n      onChanged({ jimpImage: image, filename });\n      setImageData(getImageDataFromJimpImage(image));\n    }\n  }, [image, onChanged, filename]);\n\n  // if the source image has changed, apply cropping\n  useEffect(() => {\n    if (sourceImage === undefined) {\n      return;\n    }\n\n    const newImage = sourceImage.clone();\n    if (scale === 'fill') {\n      newImage.cover(320, 200, Jimp.RESIZE_HERMITE);\n    } else if (scale === 'fit') {\n      newImage.contain(320, 200, Jimp.RESIZE_HERMITE);\n    } else {\n      cropJimpImage(newImage);\n    }\n    setCroppedImage(newImage);\n  }, [sourceImage, scale]);\n\n  // if the cropped image or any of the controls change, update the image\n  useEffect(() => {\n    if (croppedImage === undefined) {\n      return;\n    }\n    const newImage = croppedImage.clone();\n\n    if (greyscale) {\n      newImage.greyscale();\n    }\n    if (normalize) {\n      newImage.normalize();\n    }\n\n    newImage.brightness(brightness);\n    newImage.contrast(contrast);\n\n    if (blur > 0) {\n      newImage.blur(blur);\n    }\n\n    newImage.mirror(mirrorHor, mirrorVer);\n\n    if (invert) {\n      newImage.invert();\n    }\n\n    if (threshold > 0) {\n      newImage.threshold({ max: threshold, autoGreyscale: false });\n    }\n\n    setImage(newImage);\n  }, [croppedImage, normalize, brightness, contrast, greyscale, blur, mirrorHor, mirrorVer, invert, threshold]);\n\n  const defaultsSet =\n    normalize === normalizeDefault &&\n    greyscale === greyscaleDefault &&\n    mirrorHor === mirrorHorDefault &&\n    mirrorVer === mirrorVerDefault &&\n    invert === invertDefault &&\n    contrast === contrastDefault &&\n    brightness === brightnessDefault &&\n    blur === blurDefault &&\n    threshold === thresholdDefault;\n\n  return (\n    <>\n      <h4>{abbreviateFilename(filename, 30)}</h4>\n      <Container>\n        <ImageUpload imageData={imageData} onload={onLoadedCallback} />\n      </Container>\n      <Container align=\"left\">\n        <ProfileSelection\n          label=\"cropping\"\n          items={['crop', 'fill', 'fit']}\n          value={scale}\n          onChange={value => {\n            setScale(value);\n          }}\n          tooltip=\"Type of cropping to apply to source image\"\n        />\n      </Container>\n\n      <ResetButton onClick={reset} disabled={defaultsSet} />\n\n      <Container align=\"left\">\n        <MyCheckbox\n          name=\"normalize\"\n          label=\"normalize\"\n          value={normalize}\n          onChange={v => setNormalize(v)}\n          tooltip=\"Stretch color intensities to their full range\"\n        />\n        <MyCheckbox\n          name=\"greyscale\"\n          label=\"greyscale\"\n          value={greyscale}\n          onChange={v => setGreyscale(v)}\n          tooltip=\"Convert to black and white\"\n        />\n        <MyCheckbox name=\"invert\" label=\"invert\" value={invert} onChange={v => setInvert(v)} tooltip=\"Invert colors\" />\n        <MyCheckbox\n          name=\"mirrorHor\"\n          label=\"flip horizontal\"\n          value={mirrorHor}\n          onChange={v => setMirrorHor(v)}\n          tooltip=\"Mirror image horizontally\"\n        />\n        <MyCheckbox\n          name=\"mirrorVer\"\n          label=\"flip vertical\"\n          value={mirrorVer}\n          onChange={v => setMirrorVer(v)}\n          tooltip=\"Mirror image vertically\"\n        />\n        <MySlider\n          label=\"brightness\"\n          value={brightness}\n          min={-1.0}\n          max={1.0}\n          step={0.05}\n          onChange={v => setBrightness(v)}\n          tooltip=\"Adjust image brightness\"\n          icon={<Brightness5OutlinedIcon />}\n        />\n        <MySlider\n          label=\"contrast\"\n          value={contrast}\n          min={-1.0}\n          max={1.0}\n          step={0.05}\n          onChange={v => setContrast(v)}\n          tooltip=\"Adjust image contrast\"\n          icon={<Brightness6OutlinedIcon />}\n        />\n        <MySlider\n          label=\"blur\"\n          value={blur}\n          max={10}\n          onChange={v => setBlur(v)}\n          tooltip=\"Blur image by this many pixels\"\n          icon={<BlurOnOutlinedIcon />}\n        />\n        <MySlider\n          label=\"threshold\"\n          value={threshold}\n          max={255}\n          onChange={v => setThreshold(v)}\n          tooltip=\"Convert to black and white and remove pixels below this intensity threshold. (0 = off)\"\n          icon={<BrokenImageOutlinedIcon />}\n        />\n      </Container>\n    </>\n  );\n}\n\nImagePreProcessor.propTypes = {\n  onChanged: PropTypes.func.isRequired\n};\n\nexport default ImagePreProcessor;\n","import React, { useEffect, useState } from 'react';\nimport { ColorSpaces, Quantizer, Converter, GraphicModes, Palettes, OrderedDither } from 'retropixels-core';\nimport PropTypes from 'prop-types';\nimport { getImageDataFromPixelImage } from './Utilities';\nimport Canvas from './Canvas';\n\nfunction TargetImage(props) {\n  const graphicMode = GraphicModes.all.bitmap;\n\n  const { jimpImage, onChanged, hires, nomaps, colorspaceId, palette, ditherId, ditherRadius } = props;\n\n  const defaultQuantizer = new Quantizer(palette, ColorSpaces.all[colorspaceId]);\n  const defaultConverter = new Converter(defaultQuantizer);\n  const defaultDitherer = new OrderedDither(OrderedDither.presets[ditherId], ditherRadius);\n\n  const [pixelImage, setPixelImage] = useState(undefined);\n  const [imageData, setImageData] = useState(undefined);\n\n  const [quantizer, setQuantizer] = useState(defaultQuantizer);\n  const [converter, setConverter] = useState(defaultConverter);\n  const [ditherer, setDitherer] = useState(defaultDitherer);\n\n  useEffect(() => {\n    setQuantizer(new Quantizer(palette, ColorSpaces.all[colorspaceId]));\n  }, [colorspaceId, palette]);\n\n  useEffect(() => {\n    setConverter(new Converter(quantizer));\n  }, [quantizer]);\n\n  useEffect(() => {\n    setDitherer(new OrderedDither(OrderedDither.presets[ditherId], ditherRadius));\n  }, [ditherId, ditherRadius]);\n\n  useEffect(() => {\n    if (jimpImage !== undefined) {\n      const newPixelImage = graphicMode({ hires, nomaps });\n      const resizedImage = jimpImage.clone();\n      resizedImage.resize(newPixelImage.mode.width, newPixelImage.mode.height);\n      ditherer.dither(resizedImage.bitmap);\n      // TODO: this is a workaround for a bug in dithering\n      // that clears the alpha channel\n      resizedImage.opaque();\n\n      converter.convert(resizedImage.bitmap, newPixelImage);\n      setPixelImage(newPixelImage);\n    }\n  }, [jimpImage, converter, ditherer, hires, nomaps, graphicMode]);\n\n  useEffect(() => {\n    setImageData(getImageDataFromPixelImage(pixelImage));\n    onChanged(pixelImage);\n  }, [pixelImage, onChanged]);\n\n  return (\n    <>\n      <Canvas width={320} height={200} imageData={imageData} />\n    </>\n  );\n}\n\nTargetImage.propTypes = {\n  jimpImage: PropTypes.shape(),\n  onChanged: PropTypes.func,\n  hires: PropTypes.bool,\n  nomaps: PropTypes.bool,\n  colorspaceId: PropTypes.string,\n  palette: PropTypes.shape(),\n  ditherId: PropTypes.string,\n  ditherRadius: PropTypes.number\n};\n\nTargetImage.defaultProps = {\n  jimpImage: undefined,\n  onChanged: () => {},\n  hires: false,\n  nomaps: false,\n  colorspaceId: 'xyz',\n  palette: Palettes.all.colodore,\n  ditherId: 'bayer4x4',\n  ditherRadius: 32\n};\n\nexport default TargetImage;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox, Grid, List, ListItem, ListItemIcon, Container, Box } from '@material-ui/core';\nimport { Palettes } from 'retropixels-core';\nimport Brightness1Icon from '@material-ui/icons/Brightness1';\nimport ProfileSelection from './ProfileSelection';\nimport ResetButton from './ResetButton';\n\nconst paletteOptions = ['colodore', 'pepto'];\nconst paletteIdDefault = 'colodore';\n\nfunction PaletteControl(props) {\n  const { onChange } = props;\n\n  const enabledDefault = {\n    0: true,\n    1: true,\n    2: true,\n    3: true,\n    4: true,\n    5: true,\n    6: true,\n    7: true,\n    8: true,\n    9: true,\n    10: true,\n    11: true,\n    12: true,\n    13: true,\n    14: true,\n    15: true\n  };\n\n  const [paletteId, setPaletteId] = useState(paletteIdDefault);\n  const [palette, setPalette] = useState(Palettes.all[paletteId]);\n  const [enabledMap, setEnabledMap] = useState(enabledDefault);\n\n  useEffect(() => {\n    const enabledColors = [];\n    for (let i = 0; i < 16; i += 1) {\n      if (enabledMap[i]) {\n        enabledColors.push(i);\n      }\n    }\n    const newPalette = { ...Palettes.all[paletteId] };\n    newPalette.enabled = enabledColors;\n    setPalette(newPalette);\n  }, [paletteId, enabledMap]);\n\n  useEffect(() => {\n    onChange(palette);\n  }, [palette, onChange]);\n\n  // TODO: memoize\n  const nrEnabled = Object.values(enabledMap).filter(v => v).length;\n\n  const defaultsSet = nrEnabled === palette.colors.length && paletteId === paletteIdDefault;\n\n  function reset() {\n    setEnabledMap(enabledDefault);\n    setPaletteId(paletteIdDefault);\n  }\n\n  function onChanged(index) {\n    return () => {\n      const newValue = !enabledMap[index];\n      if (!newValue && nrEnabled <= 1) {\n        return;\n      }\n      const newEnabledMap = { ...enabledMap };\n      newEnabledMap[index] = newValue;\n      setEnabledMap(newEnabledMap);\n    };\n  }\n\n  function subPalette(startIndex) {\n    const result = [];\n    for (let i = startIndex; i < startIndex + 8; i += 1) {\n      const [r, g, b] = palette.colors[i];\n      const id = `${r}${g}${b}`;\n      result.push(\n        <ListItem key={id}>\n          <ListItemIcon>\n            <Checkbox checked={enabledMap[i]} onChange={onChanged(i)} name={`${id}cb`} />\n          </ListItemIcon>\n          <Box boxShadow={1} borderRadius=\"borderRadius\">\n            <Brightness1Icon fontSize=\"small\" style={{ color: `rgb(${r}, ${g}, ${b})` }} />\n          </Box>\n        </ListItem>\n      );\n    }\n    return result;\n  }\n\n  return (\n    <>\n      <Grid container>\n        <Grid item xs align=\"left\">\n          <ResetButton onClick={reset} disabled={defaultsSet} />\n          <Container align=\"left\">\n            <ProfileSelection\n              label=\"palette\"\n              value={paletteId}\n              items={paletteOptions}\n              onChange={setPaletteId}\n              tooltip=\"Use this palette for quantizing\"\n            />\n          </Container>\n        </Grid>\n        <Grid item xs>\n          <List dense>{subPalette(0)}</List>\n        </Grid>\n        <Grid item xs>\n          <List dense>{subPalette(8)}</List>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nPaletteControl.propTypes = {\n  onChange: PropTypes.func.isRequired\n};\n\nexport default PaletteControl;\n","import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Container, Tooltip, Grid } from '@material-ui/core';\nimport BlurLinearIcon from '@material-ui/icons/BlurLinear';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\nimport { C64Writer, Palettes } from 'retropixels-core';\nimport { saveAs } from 'file-saver';\nimport { parseFilename } from './Utilities';\nimport ProfileSelection from './ProfileSelection';\nimport TargetImage from './TargetImage';\nimport MyCheckbox from './MyCheckbox';\nimport MySlider from './MySlider';\nimport ResetButton from './ResetButton';\nimport PaletteControl from './PaletteControl';\n\n// options\nconst ditherOptions = ['none', 'bayer2x2', 'bayer4x4', 'bayer8x8'];\nconst colorspaceOptions = ['rgb', 'yuv', 'xyz', 'rainbow'];\n\n// defaults\nconst ditherDefault = 'bayer4x4';\nconst paletteDefault = Palettes.all.colodore;\nconst colorspaceDefault = 'xyz';\nconst hiresDefault = false;\nconst nomapsDefault = false;\nconst ditherRadiusDefault = 32;\n\nfunction Retropixels(props) {\n  const { jimpImage, filename } = props;\n\n  const [pixelImage, setPixelImage] = useState(undefined);\n  const [colorspace, setColorSpace] = useState(colorspaceDefault);\n  const [palette, setPalette] = useState(paletteDefault);\n  const [hires, setHires] = useState(hiresDefault);\n  const [nomaps, setNomaps] = useState(nomapsDefault);\n  const [dither, setDither] = useState(ditherDefault);\n  const [ditherRadius, setDitherRadius] = useState(ditherRadiusDefault);\n\n  // memoize the callback to avoid re-renders\n  const paletteCallback = useCallback(p => setPalette(p), []);\n\n  let targetFilename = 'output';\n  if (pixelImage !== undefined) {\n    const extension = pixelImage.mode.pixelWidth === 1 ? '.art' : '.kla';\n    const parsedFilename = parseFilename(filename);\n    targetFilename = `${parsedFilename.basename.substring(0, 30)}${extension}`;\n  }\n\n  function onNewPixelImage(newPixelImage) {\n    setPixelImage(newPixelImage);\n  }\n\n  function reset() {\n    setColorSpace(colorspaceDefault);\n    setHires(hiresDefault);\n    setNomaps(nomapsDefault);\n    setDither(ditherDefault);\n    setDitherRadius(ditherRadiusDefault);\n  }\n\n  function saveOutput() {\n    const binary = C64Writer.toBinary(pixelImage);\n    const buffer = C64Writer.toBuffer(binary);\n    const blob = new Blob([buffer], { type: 'application/octet-stream' });\n    saveAs(blob, targetFilename);\n  }\n\n  // function savePNG() {\n  //   JimpPreprocessor.toJimpImage(pixelImage, Palettes.all[palette]).then(outputJimpImage => {\n  //     outputJimpImage.image\n  //       .getBufferAsync(Jimp.MIME_PNG)\n  //       .then(buffer => {\n  //         const blob = new Blob([buffer], { type: 'application/octet-stream' });\n  //         saveAs(blob, 'test.png');\n  //       })\n  //       .catch(error => alert(error));\n  //   });\n  // }\n\n  let outputFormat = 'output';\n  if (pixelImage !== undefined) {\n    outputFormat = pixelImage.mode.pixelWidth === 1 ? 'art studio file' : 'koala painter file';\n  }\n\n  const defaultsSet =\n    colorspace === colorspaceDefault &&\n    hires === hiresDefault &&\n    nomaps === nomapsDefault &&\n    dither === ditherDefault &&\n    ditherRadius === ditherRadiusDefault;\n\n  return (\n    <Grid container>\n      <Grid item xs>\n        <h4>{outputFormat}</h4>\n        <Container>\n          <TargetImage\n            jimpImage={jimpImage}\n            onChanged={onNewPixelImage}\n            hires={hires}\n            nomaps={nomaps}\n            colorspaceId={colorspace}\n            palette={palette}\n            ditherId={dither}\n            ditherRadius={ditherRadius}\n          />\n        </Container>\n        <Container>\n          <Tooltip title={`Download the image as ${outputFormat}`} arrow>\n            <Button\n              variant=\"contained\"\n              disabled={pixelImage === undefined}\n              color=\"primary\"\n              startIcon={<CloudDownloadIcon />}\n              onClick={() => saveOutput()}\n            >\n              Download\n            </Button>\n          </Tooltip>\n        </Container>\n        <ResetButton onClick={reset} disabled={defaultsSet} />\n        <Container align=\"left\">\n          <MyCheckbox\n            name=\"hires\"\n            label=\"hires\"\n            value={hires}\n            onChange={v => setHires(v)}\n            tooltip=\"Use high resolution mode instead of multi color\"\n          />\n          <MyCheckbox\n            name=\"nomaps\"\n            label=\"single color layers\"\n            value={nomaps}\n            onChange={v => setNomaps(v)}\n            tooltip=\"Restrict each attribute layer to a single color\"\n          />\n        </Container>\n        <Container align=\"left\">\n          <ProfileSelection\n            label=\"colorspace\"\n            value={colorspace}\n            items={colorspaceOptions}\n            onChange={value => setColorSpace(value)}\n            tooltip=\"Convert colors to this color space before quantizing\"\n          />\n          <ProfileSelection\n            label=\"dithering\"\n            value={dither}\n            items={ditherOptions}\n            onChange={value => setDither(value)}\n            tooltip=\"Type of dithering to apply\"\n          />\n          <MySlider\n            label=\"dithering strength\"\n            value={ditherRadius}\n            max={64}\n            onChange={v => setDitherRadius(v)}\n            tooltip=\"Strength of dithering\"\n            icon={<BlurLinearIcon />}\n            disabled={dither === 'none'}\n          />\n        </Container>\n      </Grid>\n      <Grid item xs>\n        <h4>palette</h4>\n        <PaletteControl onChange={paletteCallback} />\n      </Grid>\n    </Grid>\n  );\n}\n\nRetropixels.propTypes = {\n  jimpImage: PropTypes.shape(),\n  filename: PropTypes.string\n};\n\nRetropixels.defaultProps = {\n  jimpImage: undefined,\n  filename: 'output'\n};\n\nexport default Retropixels;\n","export default __webpack_public_path__ + \"static/media/logo.42e2fcaf.svg\";","export default {buildnr: '2021-06-05.2e86f11', url: 'https://github.com/micheldebree/retropixels/commit/2e86f11f2ed45ba9e1109f7a0fdd1c72c83ee83e'}\n","import React, { useState } from 'react';\nimport { Grid, AppBar, Toolbar, Typography, Button, Link, Container } from '@material-ui/core';\nimport './App.css';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ImagePreProcessor from './ImagePreProcessor';\nimport Retropixels from './Retropixels';\nimport Logo from './logo.svg';\nimport AppVersion from './version';\n\n// https://github.com/harishmahamure/photoCompress\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nfunction App() {\n  const [sourceImage, setSourceImage] = useState(undefined);\n  const [filename, setFilename] = useState(undefined);\n\n  const classes = useStyles();\n\n  function onSourceImageChanged(newSourceImage) {\n    setSourceImage(newSourceImage.jimpImage);\n    setFilename(newSourceImage.filename);\n  }\n  return (\n    <div className=\"App\">\n      <body className=\"App-body\">\n        <div className={classes.root}>\n          <AppBar position=\"static\">\n            <Toolbar variant=\"dense\">\n              <img src={Logo} alt=\"Logo\" className=\"logo\" />\n              <Typography variant=\"h6\" className={classes.title} align=\"left\">\n                Retropixels\n              </Typography>\n              <Link href={AppVersion.url} color=\"inherit\" variant=\"body2\">\n                v{AppVersion.buildnr}\n              </Link>\n              <Button color=\"inherit\" href=\"https://github.com/micheldebree/retropixels\">\n                <GitHubIcon />\n              </Button>\n            </Toolbar>\n          </AppBar>\n        </div>\n        <Container align=\"left\">\n          <Typography variant=\"overline\">\n            Convert images to <Link href=\"https://en.wikipedia.org/wiki/Commodore_64\">Commodore 64</Link> format\n          </Typography>\n        </Container>\n        <Grid container spacing={3}>\n          <Grid item xs={4}>\n            <ImagePreProcessor onChanged={onSourceImageChanged} />\n          </Grid>\n          <Grid item xs>\n            <Retropixels jimpImage={sourceImage} filename={filename} />\n          </Grid>\n        </Grid>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}