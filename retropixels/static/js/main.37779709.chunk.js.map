{"version":3,"sources":["Canvas.jsx","ImageUpload.jsx","Utilities.js","ProfileSelection.jsx","SourceImage.jsx","ImagePreProcessor.jsx","TargetImage.jsx","Retropixels.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Canvas","props","canvasRef","React","useRef","width","height","imageData","useEffect","undefined","current","getContext","putImageData","Box","m","ref","defaultProps","ImageUpload","onload","useState","error","setError","useDropzone","accept","maxFiles","acceptedFiles","fileRejections","getRootProps","getInputProps","length","file","reader","FileReader","onabort","onerror","Jimp","read","result","then","img","jimpImage","filename","name","catch","err","message","readAsArrayBuffer","readFile","Container","border","boxShadow","borderRadius","borderColor","className","Snackbar","open","autoHideDuration","onClose","Alert","severity","getImageDataFromJimpImage","data","dataSize","bitmap","slice","ImageData","Uint8ClampedArray","from","parseFilename","periodPos","lastIndexOf","extension","substring","basename","Math","min","abbreviateFilename","maxSize","parsed","ProfileSelection","label","value","items","onChange","FormControl","component","FormLabel","RadioGroup","row","aria-label","event","target","map","i","FormControlLabel","control","Radio","SourceImage","onChanged","uploadedImage","setUploadedImage","image","setImage","setImageData","scale","setScale","setFilename","newImage","clone","cover","contain","blitImage","crop","scan","x","y","idx","clearJimpImage","blit","cropJimpImage","newUploadedImage","align","ImagePreProcessor","normalizeDefault","greyscaleDefault","mirrorHorDefault","mirrorVerDefault","invertDefault","normalize","setNormalize","greyscale","setGreyscale","mirrorHor","setMirrorHor","mirrorVer","setMirrorVer","invert","setInvert","brightness","setBrightness","contrast","setContrast","blur","setBlur","threshold","setThreshold","mirror","max","autoGreyscale","defaultsSet","Button","variant","disabled","onClick","Checkbox","checked","Typography","gutterBottom","Grid","container","item","xs","Slider","step","newValue","valueLabelDisplay","TargetImage","graphicMode","GraphicModes","all","hires","colorspaceId","paletteId","ditherId","ditherRadius","defaultQuantizer","Quantizer","Palettes","ColorSpaces","defaultConverter","Converter","defaultDitherer","OrderedDither","presets","pixelImage","setPixelImage","quantizer","setQuantizer","converter","setConverter","ditherer","setDitherer","newPixelImage","resizedImage","resize","mode","dither","opaque","convert","imageWidth","pixelWidth","paletteIndex","peek","pixelValue","colodore","get","xx","index","getImageDataFromPixelImage","Retropixels","ditherDefault","paletteDefault","colorspaceDefault","hiresDefault","colorspace","setColorSpace","palette","setPalette","setHires","setDither","setDitherRadius","targetFilename","parsedFilename","outputFormat","color","binary","C64Writer","toBinary","buffer","toBuffer","blob","Blob","type","saveAs","saveOutput","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","App","sourceImage","setSourceImage","processedImage","setProcessedImage","classes","AppBar","position","Toolbar","href","newSourceImage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"waAOA,SAASA,EAAOC,GACd,IAAMC,EAAYC,IAAMC,OAAO,MAGvBC,EAA6BJ,EAA7BI,MAAOC,EAAsBL,EAAtBK,OAAQC,EAAcN,EAAdM,UASvB,OANAC,qBAAU,gBACUC,IAAdF,GANmBL,EAAUQ,QAAQC,WAAW,MAOrCC,aAAaL,EAAW,EAAG,KAEzC,CAACA,IAGF,cAACM,EAAA,EAAD,CAAKC,EAAG,EAAR,SACE,wBAAQC,IAAKb,EAAWG,MAAOA,EAAOC,OAAQA,MAYpDN,EAAOgB,aAAe,CACpBT,eAAWE,GAGET,QCzBf,SAASiB,EAAYhB,GAAQ,IACnBiB,EAAsBjB,EAAtBiB,OAAQX,EAAcN,EAAdM,UADU,EAGAY,wBAASV,GAHT,mBAGnBW,EAHmB,KAGZC,EAHY,OAI6CC,YAAY,CACjFC,OAAQ,UACRC,SAAU,IAFJC,EAJkB,EAIlBA,cAAeC,EAJG,EAIHA,eAAgBC,EAJb,EAIaA,aAAcC,EAJ3B,EAI2BA,cAqCrD,OAhCApB,qBAAU,gBAkBcC,IAAlBgB,GAAwD,IAAzBA,EAAcI,QAjBhC,SAAAC,GACf,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,QAAU,kBAAMZ,EAAS,6BAChCU,EAAOG,QAAU,kBAAMb,EAAS,4BAChCU,EAAOb,OAAS,WACdiB,IAAKC,KAAKL,EAAOM,QACdC,MAAK,SAAAC,GACJlB,OAASZ,GACTS,EAAO,CAAEsB,UAAWD,EAAKE,SAAUX,EAAKY,UAEzCC,OAAM,SAAAC,GACLvB,EAASuB,EAAIC,aAGnBd,EAAOe,kBAAkBhB,GAGzBiB,CAAStB,EAAc,MAExB,CAACA,IAEJjB,qBAAU,gBACeC,IAAnBiB,GAAgCA,EAAeG,OAAS,GAC1DR,EAAS,kBAAD,OAAmBK,EAAe,GAAGI,SAE9C,CAACJ,IAMF,eAACsB,EAAA,EAAD,WACE,cAACnC,EAAA,EAAD,CAAKoC,OAAQ,EAAGnC,EAAG,EAAGoC,UAAW,EAAGC,aAAa,eAAeC,YAAY,WAA5E,SACE,gDAASzB,EAAa,CAAE0B,UAAW,cAAnC,cACE,qCAAWzB,MACX,cAAC,EAAD,CAAQvB,MAAO,IAAKC,OAAQ,IAAKC,UAAWA,IAC5C,gFAKJ,cAAC+C,EAAA,EAAD,CAAUC,KAAMnC,EAAOoC,iBAAkB,IAAMC,QAAS,kBAAMpC,OAASZ,IAAvE,SACE,cAACiD,EAAA,EAAD,CAAOC,SAAS,QAAhB,SAAyBvC,SAYjCH,EAAYD,aAAe,CACzBT,eAAWE,GAEEQ,Q,QC/DR,SAAS2C,EAA0BpB,GACxC,QAAkB/B,IAAd+B,EAAJ,CAKA,IACIqB,EADEC,EAAWtB,EAAUuB,OAAO1D,MAAQmC,EAAUuB,OAAOzD,OAAS,EAQpE,OALEuD,EADErB,EAAUuB,OAAOF,KAAKhC,OAASiC,EAC1BtB,EAAUuB,OAAOF,KAAKG,MAAM,EAAGF,GAE/BtB,EAAUuB,OAAOF,UAGLpD,IAAd+B,EACH,IAAIyB,UAAUC,kBAAkBC,KAAKN,GAAOrB,EAAUuB,OAAO1D,MAAOmC,EAAUuB,OAAOzD,aACrFG,GAsCC,SAAS2D,EAAc3B,GAC5B,IAAM4B,EAAY5B,EAAS6B,YAAY,KACjCC,EAAY9B,EAAS+B,UAAUH,EAAY,EAAG5B,EAASZ,QAE7D,MAAO,CAAE4C,SADQhC,EAAS+B,UAAU,EAAGE,KAAKC,IAAI,GAAIN,IACjCE,aAGd,SAASK,EAAmBnC,EAAUoC,GAC3C,GAAIpC,EAASZ,QAAUgD,EACrB,OAAOpC,EAET,IAAMqC,EAASV,EAAc3B,GAE7B,MAAM,GAAN,OAAUqC,EAAOL,SAASD,UAAU,EAAGK,GAAvC,cAAqDC,EAAOP,WAG/C,I,6CChFf,SAASQ,EAAiB9E,GAAQ,IACxB+E,EAAkC/E,EAAlC+E,MAAOC,EAA2BhF,EAA3BgF,MAAOC,EAAoBjF,EAApBiF,MAAOC,EAAalF,EAAbkF,SAE7B,OACE,eAACC,EAAA,EAAD,CAAaC,UAAU,WAAvB,UACE,cAACC,EAAA,EAAD,CAAWD,UAAU,SAArB,SAA+BL,IAC/B,cAACO,EAAA,EAAD,CACEC,KAAG,EACHC,aAAYT,EACZtC,KAAI,gBAAWsC,GACfC,MAAOA,EACPE,SAAU,SAAAO,GAAK,OAAIP,EAASO,EAAMC,OAAOV,QAL3C,SAOGC,EAAMU,KAAI,SAAAC,GAAC,OACV,cAACC,EAAA,EAAD,CAAkBb,MAAOY,EAAGE,QAAS,cAACC,EAAA,EAAD,IAAWhB,MAAOa,YAcjEd,EAAiB/D,aAAe,CAC9BgE,MAAO,UAGMD,QC8CAkB,MA5Ef,SAAqBhG,GAAQ,IACnBiG,EAAcjG,EAAdiG,UADkB,EAGgB/E,wBAASV,GAHzB,mBAGnB0F,EAHmB,KAGJC,EAHI,OAIAjF,wBAASV,GAJT,mBAInB4F,EAJmB,KAIZC,EAJY,OAKQnF,wBAASV,GALjB,mBAKnBF,EALmB,KAKRgG,EALQ,OAMApF,mBAAS,QANT,mBAMnBqF,EANmB,KAMZC,EANY,OAOMtF,mBAAS,SAPf,mBAOnBsB,EAPmB,KAOTiE,EAPS,KAoD1B,OArBAlG,qBAAU,WACR,QAAsBC,IAAlB0F,EAAJ,CAIA,IAAMQ,EAAWR,EAAcS,QACjB,SAAVJ,EACFG,EAASE,MAAM,IAAK,IAAK1E,kBACN,QAAVqE,EACTG,EAASG,QAAQ,IAAK,IAAK3E,kBA1B/B,SAAuBK,GACrB,IACIuE,GADevE,EAAUuB,OAAO1D,MAAQ,KAAOmC,EAAUuB,OAAOzD,OAAS,OAO3EyG,EAAYvE,EAAUoE,SAExBpE,EAAUwE,KAAK,EAAG,EAAG,IAAK,UACRvG,IAAdsG,IFED,SAAwBvE,GAC7BA,EAAUyE,KAAK,EAAG,EAAGzE,EAAUuB,OAAO1D,MAAOmC,EAAUuB,OAAOzD,QAAQ,SAAC4G,EAAGC,EAAGC,GAG3E5E,EAAUuB,OAAOF,KAAKuD,EAAM,GAAK,EACjC5E,EAAUuB,OAAOF,KAAKuD,EAAM,GAAK,EACjC5E,EAAUuB,OAAOF,KAAKuD,EAAM,GAAK,EACjC5E,EAAUuB,OAAOF,KAAKuD,EAAM,GAAK,KER/BC,CAAe7E,GACfA,EAAU8E,KAAKP,EAAW,EAAG,IAe7BQ,CAAcZ,GAEhBL,EAASK,MACR,CAACR,EAAeK,IAEnBhG,qBAAU,WACR0F,EAAU,CAAE1D,UAAW6D,EAAO5D,aAC9B8D,EAAa3C,EAA0ByC,MACtC,CAACA,EAAOH,EAAWzD,IAGpB,qCACE,6BAAKmC,EAAmBnC,EAAU,MAClC,cAACO,EAAA,EAAD,UACE,cAAC,EAAD,CAAazC,UAAWA,EAAWW,OA/CzC,SAAoBsG,GAClBpB,EAAiBoB,EAAiBhF,WAClCkE,EAAYc,EAAiB/E,eA+C3B,cAACO,EAAA,EAAD,CAAWyE,MAAM,OAAjB,SACE,cAAC,EAAD,CACEzC,MAAM,WACNE,MAAO,CAAC,OAAQ,OAAQ,OACxBD,MAAOuB,EACPrB,SAAU,SAAAF,GACRwB,EAASxB,Y,2GC9DrB,SAASyC,EAAkBzH,GAAQ,IACzBuC,EAAyBvC,EAAzBuC,UAAW0D,EAAcjG,EAAdiG,UAIbyB,GAAmB,EACnBC,GAAmB,EACnBC,GAAmB,EACnBC,GAAmB,EACnBC,GAAgB,EATU,EAeN5G,wBAASV,GAfH,mBAezB4F,EAfyB,KAelBC,EAfkB,OAgBEnF,wBAASV,GAhBX,mBAgBzBF,EAhByB,KAgBdgG,EAhBc,OAiBEpF,mBAASwG,GAjBX,mBAiBzBK,EAjByB,KAiBdC,EAjBc,OAkBE9G,mBAASyG,GAlBX,mBAkBzBM,EAlByB,KAkBdC,EAlBc,OAmBEhH,mBAAS0G,GAnBX,mBAmBzBO,EAnByB,KAmBdC,EAnBc,OAoBElH,mBAAS2G,GApBX,mBAoBzBQ,EApByB,KAoBdC,EApBc,OAqBJpH,mBAAS4G,GArBL,mBAqBzBS,EArByB,KAqBjBC,EArBiB,OAsBItH,mBAZV,GAVM,oBAsBzBuH,GAtByB,MAsBbC,GAtBa,SAuBAxH,mBAZR,GAXQ,qBAuBzByH,GAvByB,MAuBfC,GAvBe,SAwBR1H,mBAZJ,GAZY,qBAwBzB2H,GAxByB,MAwBnBC,GAxBmB,SAyBE5H,mBAZT,GAbO,qBAyBzB6H,GAzByB,MAyBdC,GAzBc,MAwChCzI,qBAAU,WACR0F,EAAUG,GACVE,EAAa3C,EAA0ByC,MACtC,CAACA,EAAOH,IAEX1F,qBAAU,WACR,QAAkBC,IAAd+B,EAAJ,CAGA,IAAMmE,EAAWnE,EAAUoE,QAEvBsB,GACFvB,EAASuB,YAEPF,GACFrB,EAASqB,YAGXrB,EAAS+B,WAAWA,IACpB/B,EAASiC,SAASA,IAEdE,GAAO,GACTnC,EAASmC,KAAKA,IAGhBnC,EAASuC,OAAOd,EAAWE,GAEvBE,GACF7B,EAAS6B,SAGPQ,GAAY,GACdrC,EAASqC,UAAU,CAAEG,IAAKH,GAAWI,eAAe,IAgBtD9C,EAASK,MACR,CAACnE,EAAWwF,EAAWU,GAAYE,GAAUV,EAAWY,GAAMV,EAAWE,EAAWE,EAAQQ,KAE/F,IAAMK,GACJrB,IAAcL,GACdO,IAAcN,GACdQ,IAAcP,GACdS,IAAcR,GACdU,IAAWT,GArFW,IAsFtBa,IAvFwB,IAwFxBF,IAtFkB,IAuFlBI,IAtFuB,IAuFvBE,GAEF,OACE,qCACE,gDACA,cAAChG,EAAA,EAAD,UACE,cAAC,EAAD,CAAQ3C,MAAO,IAAKC,OAAQ,IAAKC,UAAWA,MAE9C,cAACyC,EAAA,EAAD,UACE,eAACsG,EAAA,EAAD,CAAQC,QAAQ,YAAYC,SAAUH,GAAaI,QAAS,kBAhFhExB,EAAaN,GACbQ,EAAaP,GACbS,EAAaR,GACbU,EAAaT,GACbW,EAAUV,GACVY,GAxBwB,GAyBxBE,GAxBsB,GAyBtBE,GAxBkB,QAyBlBE,GAxBuB,IAgGnB,UACE,cAAC,IAAD,IADF,sBAKF,eAACjG,EAAA,EAAD,CAAWyE,MAAM,OAAjB,UACE,cAAC3B,EAAA,EAAD,CACEC,QACE,cAAC2D,EAAA,EAAD,CACEC,QAAS3B,EACT7C,SAAU,WACR8C,GAAcD,IAEhBtF,KAAK,sBAGTsC,MAAM,cAER,cAACc,EAAA,EAAD,CACEC,QACE,cAAC2D,EAAA,EAAD,CACEC,QAASzB,EACT/C,SAAU,WACRgD,GAAcD,IAEhBxF,KAAK,sBAGTsC,MAAM,cAER,cAACc,EAAA,EAAD,CACEC,QACE,cAAC2D,EAAA,EAAD,CACEC,QAASnB,EACTrD,SAAU,WACRsD,GAAWD,IAEb9F,KAAK,mBAGTsC,MAAM,cAGV,eAAChC,EAAA,EAAD,CAAWyE,MAAM,OAAjB,UACE,cAAC3B,EAAA,EAAD,CACEC,QACE,cAAC2D,EAAA,EAAD,CACEC,QAASvB,EACTjD,SAAU,WACRkD,GAAcD,IAEhB1F,KAAK,sBAGTsC,MAAM,oBAER,cAACc,EAAA,EAAD,CACEC,QACE,cAAC2D,EAAA,EAAD,CACEC,QAASrB,EACTnD,SAAU,WACRoD,GAAcD,IAEhB5F,KAAK,sBAGTsC,MAAM,qBAGV,cAAC4E,EAAA,EAAD,CAAYC,cAAY,EAACpC,MAAM,OAA/B,wBAGA,eAACqC,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,eAACD,EAAA,EAAD,CAAME,MAAI,EAAV,UACE,cAAC,IAAD,IADF,WAGA,cAACF,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAAb,SACE,cAACC,EAAA,EAAD,CACEvF,KAAM,EACNwE,IAAK,EACLgB,KAAM,IACNlF,MAAOyD,GACPvD,SAAU,SAACO,EAAO0E,GAAR,OAAqBzB,GAAcyB,IAC7CC,kBAAkB,cAIxB,cAACT,EAAA,EAAD,CAAYC,cAAY,EAACpC,MAAM,OAA/B,sBAGA,eAACqC,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,eAACD,EAAA,EAAD,CAAME,MAAI,EAAV,UACE,cAAC,IAAD,IADF,WAGA,cAACF,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAAb,SACE,cAACC,EAAA,EAAD,CACEvF,KAAM,EACNwE,IAAK,EACLgB,KAAM,IACNlF,MAAO2D,GACPzD,SAAU,SAACO,EAAO0E,GAAR,OAAqBvB,GAAYuB,IAC3CC,kBAAkB,cAKxB,cAACT,EAAA,EAAD,CAAYC,cAAY,EAACpC,MAAM,OAA/B,kBAGA,eAACqC,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,eAACD,EAAA,EAAD,CAAME,MAAI,EAAV,UACE,cAAC,IAAD,IADF,WAGA,cAACF,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAAb,SACE,cAACC,EAAA,EAAD,CACEvF,IAAK,EACLwE,IAAK,GACLlE,MAAO6D,GACP3D,SAAU,SAACO,EAAO0E,GAAR,OAAqBrB,GAAQqB,IACvCC,kBAAkB,cAKxB,cAACT,EAAA,EAAD,CAAYC,cAAY,EAACpC,MAAM,OAA/B,uBAGA,eAACqC,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,eAACD,EAAA,EAAD,CAAME,MAAI,EAAV,UACE,cAAC,IAAD,IADF,WAGA,cAACF,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAAb,SACE,cAACC,EAAA,EAAD,CAAQvF,IAAK,EAAGwE,IAAK,IAAKlE,MAAO+D,GAAW7D,SAAU,SAACO,EAAO0E,GAAR,OAAqBnB,GAAamB,cA6BlG1C,EAAkB1G,aAAe,CAC/BwB,eAAW/B,GAGEiH,S,wECvRf,SAAS4C,GAAYrK,GACnB,IAAMsK,EAAcC,eAAaC,IAAI1G,OAE7BvB,EAAiFvC,EAAjFuC,UAAW0D,EAAsEjG,EAAtEiG,UAAWwE,EAA2DzK,EAA3DyK,MAAOC,EAAoD1K,EAApD0K,aAAcC,EAAsC3K,EAAtC2K,UAAWC,EAA2B5K,EAA3B4K,SAAUC,EAAiB7K,EAAjB6K,aAElEC,EAAmB,IAAIC,YAAUC,WAASR,IAAIG,GAAYM,cAAYT,IAAIE,IAC1EQ,EAAmB,IAAIC,YAAUL,GACjCM,EAAkB,IAAIC,KAAcA,KAAcC,QAAQV,GAAWC,GAPjD,EASU3J,wBAASV,GATnB,mBASnB+K,EATmB,KASPC,EATO,OAUQtK,wBAASV,GAVjB,mBAUnBF,EAVmB,KAURgG,EAVQ,OAYQpF,mBAAS4J,GAZjB,mBAYnBW,EAZmB,KAYRC,EAZQ,OAaQxK,mBAASgK,GAbjB,mBAanBS,EAbmB,KAaRC,EAbQ,OAcM1K,mBAASkK,GAdf,mBAcnBS,EAdmB,KAcTC,EAdS,KAkD1B,OAlCAvL,qBAAU,WACRmL,EAAa,IAAIX,YAAUC,WAASR,IAAIG,GAAYM,cAAYT,IAAIE,OACnE,CAACA,EAAcC,IAElBpK,qBAAU,WACRqL,EAAa,IAAIT,YAAUM,MAC1B,CAACA,IAEJlL,qBAAU,WACRuL,EAAY,IAAIT,KAAcA,KAAcC,QAAQV,GAAWC,MAC9D,CAACD,EAAUC,IAEdtK,qBAAU,WACR,QAAkBC,IAAd+B,EAAyB,CAC3B,IAAMwJ,EAAgBzB,EAAY,CAAEG,UAC9BuB,EAAezJ,EAAUoE,QAC/BqF,EAAaC,OAAOF,EAAcG,KAAK9L,MAAO2L,EAAcG,KAAK7L,QAChD,SAAbuK,GACFiB,EAASM,OAAOH,EAAalI,QAI/BkI,EAAaI,SAEbT,EAAUU,QAAQL,EAAalI,OAAQiI,GACvCP,EAAcO,MAEf,CAACxJ,EAAWoJ,EAAWE,EAAUpB,EAAOH,IAE3C/J,qBAAU,WACR+F,EJLG,SAAoCiF,GACzC,QAAmB/K,IAAf+K,EACF,OAAO,IAAIvH,UAAU,EAAG,GAK1B,IAHA,IAAMsI,EAAaf,EAAWW,KAAK9L,MAAQmL,EAAWW,KAAKK,WAErDjM,EAAY,IAAI0D,UAAUsI,EAAYf,EAAWW,KAAK7L,QACnD6G,EAAI,EAAGA,EAAIqE,EAAWW,KAAK7L,OAAQ6G,IAC1C,IAAK,IAAID,EAAI,EAAGA,EAAIsE,EAAWW,KAAK9L,MAAO6G,IAGzC,IAFA,IAAMuF,EAAejB,EAAWkB,KAAKxF,EAAGC,GAClCwF,OAA8BlM,IAAjBgM,EAA6BxB,WAASR,IAAImC,SAASC,IAAIJ,GAAgB,CAAC,EAAG,EAAG,EAAG,GAC3FK,EAAK,EAAGA,EAAKtB,EAAWW,KAAKK,WAAYM,IAAM,CACtD,IAAMC,EAAY,EAAJ5F,EAAQoF,EAAarF,EAAIsE,EAAWW,KAAKK,WAAa,EAAS,EAALM,EACxEvM,EAAUsD,KAAKkJ,GAASJ,EAAW,GACnCpM,EAAUsD,KAAKkJ,EAAQ,GAAKJ,EAAW,GACvCpM,EAAUsD,KAAKkJ,EAAQ,GAAKJ,EAAW,GACvCpM,EAAUsD,KAAKkJ,EAAQ,GAAK,IAKlC,OAAOxM,EIhBQyM,CAA2BxB,IACxCtF,EAAUsF,KACT,CAACA,EAAYtF,IAGd,mCACE,cAAC,EAAD,CAAQ7F,MAAO,IAAKC,OAAQ,IAAKC,UAAWA,MAelD+J,GAAYtJ,aAAe,CACzBwB,eAAW/B,EACXyF,UAAW,aACXwE,OAAO,EACPC,aAAc,MACdC,UAAW,WACXC,SAAU,WACVC,aAAc,IAGDR,UCtEf,SAAS2C,GAAYhN,GACnB,IAMMiN,EAAgB,WAChBC,EAAiB,WACjBC,EAAoB,MACpBC,GAAe,EAGb7K,EAAwBvC,EAAxBuC,UAAWC,EAAaxC,EAAbwC,SAbO,EAeUtB,wBAASV,GAfnB,mBAenB+K,EAfmB,KAePC,EAfO,OAgBUtK,mBAASiM,GAhBnB,mBAgBnBE,EAhBmB,KAgBPC,EAhBO,OAiBIpM,mBAASgM,GAjBb,mBAiBnBK,EAjBmB,KAiBVC,EAjBU,OAkBAtM,mBAASkM,GAlBT,mBAkBnB3C,EAlBmB,KAkBZgD,EAlBY,OAmBEvM,mBAAS+L,GAnBX,mBAmBnBd,EAnBmB,KAmBXuB,EAnBW,OAoBcxM,mBATZ,IAXF,mBAoBnB2J,EApBmB,KAoBL8C,EApBK,KAsBtBC,EAAiB,SACrB,QAAmBpN,IAAf+K,EAA0B,CAC5B,IAAMjH,EAA2C,IAA/BiH,EAAWW,KAAKK,WAAmB,OAAS,OACxDsB,EAAiB1J,EAAc3B,GACrCoL,EAAc,UAAMC,EAAerJ,SAASD,UAAU,EAAG,KAA3C,OAAiDD,GAkCjE,IAAIwJ,EAAe,cACAtN,IAAf+K,IACFuC,EAA8C,IAA/BvC,EAAWW,KAAKK,WAAmB,aAAe,iBAGnE,IAAMnD,EACJiE,IAAeF,GACfI,IAAYL,GACZzC,IAAU2C,GACVjB,IAAWc,GA1De,KA2D1BpC,EAEF,OACE,qCACE,+BAAKiD,EAAL,WACA,cAAC/K,EAAA,EAAD,UACE,cAAC,GAAD,CACER,UAAWA,EACX0D,UAjDR,SAAyB8F,GACvBP,EAAcO,IAiDRtB,MAAOA,EACPC,aAAc2C,EACd1C,UAAW4C,EACX3C,SAAUuB,EACVtB,aAAcA,MAGlB,cAAC9H,EAAA,EAAD,UACE,eAAC8G,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,cAACD,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAAb,SACE,eAACX,EAAA,EAAD,CAAQC,QAAQ,YAAYC,SAAUH,EAAaI,QAAS,kBAvDpE8D,EAAcH,GACdK,EAAWN,GACXO,EAASL,GACTM,EAAUT,QACVU,EA3B0B,KA8ElB,UACE,cAAC,IAAD,IADF,sBAIF,cAAC9D,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAAb,SACE,eAACX,EAAA,EAAD,CACEC,QAAQ,YACRC,cAAyB/I,IAAf+K,EACVwC,MAAM,UACNvE,QAAS,kBAzDrB,WACE,IAAMwE,EAASC,YAAUC,SAAS3C,GAC5B4C,EAASF,YAAUG,SAASJ,GAC5BK,EAAO,IAAIC,KAAK,CAACH,GAAS,CAAEI,KAAM,6BACxCC,kBAAOH,EAAMT,GAqDYa,IAJjB,UAME,cAAC,KAAD,IANF,2BAWN,cAAC1L,EAAA,EAAD,CAAWyE,MAAM,OAAjB,SAEE,cAAC3B,EAAA,EAAD,CACEC,QACE,cAAC2D,EAAA,EAAD,CACEC,QAASe,EACTvF,SAAU,WACRuI,GAAUhD,IAEZhI,KAAK,sBAGTsC,MAAM,YAGV,eAAChC,EAAA,EAAD,CAAWyE,MAAM,OAAjB,UACE,cAAC,EAAD,CACEzC,MAAM,aACNC,MAAOqI,EACPpI,MA1HkB,CAAC,MAAO,MAAO,MAAO,WA2HxCC,SAAU,SAAAF,GAAK,OAAIsI,EAActI,MAEnC,cAAC,EAAD,CACED,MAAM,UACNC,MAAOuI,EACPtI,MA/He,CAAC,WAAY,QAAS,UAgIrCC,SAAU,SAAAF,GAAK,OAAIwI,EAAWxI,MAEhC,cAAC,EAAD,CAAkBD,MAAM,YAAYC,MAAOmH,EAAQlH,MApInC,CAAC,OAAQ,WAAY,WAAY,YAoIwBC,SAAU,SAAAF,GAAK,OAAI0I,EAAU1I,MACtG,cAAC2E,EAAA,EAAD,CAAYC,cAAY,EAACpC,MAAM,OAA/B,gCAGA,eAACqC,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,eAACD,EAAA,EAAD,CAAME,MAAI,EAAV,UACE,cAAC,KAAD,IADF,WAGA,cAACF,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAAb,SACE,cAACC,EAAA,EAAD,CACEV,SAAqB,SAAX4C,EACVzH,IAAK,EACLwE,IAAK,GACLlE,MAAO6F,EACP3F,SAAU,SAACO,EAAO0E,GAAR,OAAqBwD,EAAgBxD,IAC/CC,kBAAkB,oBAchC4C,GAAYjM,aAAe,CACzBwB,eAAW/B,EACXgC,SAAU,UAGGwK,UCtKT0B,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OA+CCK,OA3Cf,WAAgB,IAAD,EACyBjO,wBAASV,GADlC,mBACN4O,EADM,KACOC,EADP,OAE+BnO,wBAASV,GAFxC,mBAEN8O,EAFM,KAEUC,EAFV,OAGmBrO,wBAASV,GAH5B,mBAGNgC,EAHM,KAGIiE,EAHJ,KAKP+I,EAAUd,KAMhB,OACE,qBAAKtL,UAAU,MAAf,SAEE,uBAAMA,UAAU,WAAhB,UACE,qBAAKA,UAAWoM,EAAQX,KAAxB,SACE,cAACY,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,eAACC,EAAA,EAAD,CAASrG,QAAQ,QAAjB,UACE,cAACK,EAAA,EAAD,CAAYL,QAAQ,KAAKlG,UAAWoM,EAAQN,MAA5C,yBAGA,cAAC7F,EAAA,EAAD,CAAQ0E,MAAM,UAAU6B,KAAK,8CAA7B,SACE,cAAC,IAAD,aAKR,eAAC/F,EAAA,EAAD,CAAMC,WAAS,EAACmF,QAAS,EAAzB,UACE,cAACpF,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAAb,SACE,cAAC,EAAD,CAAa/D,UAtBvB,SAA8B4J,GAC5BR,EAAeQ,EAAetN,WAC9BkE,EAAYoJ,EAAerN,eAsBrB,cAACqH,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAAb,SACE,cAAC,GAAD,CAAmBzH,UAAW6M,EAAanJ,UAAW,SAAA1D,GAAS,OAAIgN,EAAkBhN,QAEvF,cAACsH,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAAb,SACE,cAAC,GAAD,CAAazH,UAAW+M,EAAgB9M,SAAUA,eClD/CsN,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB3N,MAAK,YAAkD,IAA/C4N,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.37779709.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from '@material-ui/core';\n\n// https://blog.koenvangilst.nl/react-hooks-with-canvas/\n// https://www.w3schools.com/Tags/canvas_putimagedata.asp\n\nfunction Canvas(props) {\n  const canvasRef = React.useRef(null);\n  const getContext = () => canvasRef.current.getContext('2d');\n\n  const { width, height, imageData } = props;\n\n  // if imagedata property is set/changes, draw it on the canvas\n  useEffect(() => {\n    if (imageData !== undefined) {\n      getContext().putImageData(imageData, 0, 0);\n    }\n  }, [imageData]);\n\n  return (\n    <Box m={1}>\n      <canvas ref={canvasRef} width={width} height={height} />\n    </Box>\n  );\n}\n\n// TODO: get width and height from imagedata\nCanvas.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  imageData: PropTypes.shape()\n};\n\nCanvas.defaultProps = {\n  imageData: undefined\n};\n\nexport default Canvas;\n","import React, { useState, useEffect } from 'react';\nimport Jimp from 'jimp/es';\nimport PropTypes from 'prop-types';\nimport { useDropzone } from 'react-dropzone';\nimport { Container, Box, Snackbar } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport Canvas from './Canvas';\n\n// TODO: return Jimp Image\n// TODO: Only accept image types\n\n// Let's the user select an image file\n// When a valid image is selected, calls the \"onload\" callback with a JimpImage object.\nfunction ImageUpload(props) {\n  const { onload, imageData } = props;\n\n  const [error, setError] = useState(undefined);\n  const { acceptedFiles, fileRejections, getRootProps, getInputProps } = useDropzone({\n    accept: 'image/*',\n    maxFiles: 1\n  });\n\n  useEffect(() => {\n    const readFile = file => {\n      const reader = new FileReader();\n\n      reader.onabort = () => setError('file reading was aborted');\n      reader.onerror = () => setError('file reading has failed');\n      reader.onload = () => {\n        Jimp.read(reader.result)\n          .then(img => {\n            setError(undefined);\n            onload({ jimpImage: img, filename: file.name });\n          })\n          .catch(err => {\n            setError(err.message);\n          });\n      };\n      reader.readAsArrayBuffer(file);\n    };\n    if (acceptedFiles !== undefined && acceptedFiles.length === 1) {\n      readFile(acceptedFiles[0]);\n    }\n  }, [acceptedFiles]);\n\n  useEffect(() => {\n    if (fileRejections !== undefined && fileRejections.length > 0) {\n      setError(`Cannot load' + ${fileRejections[0].file}`);\n    }\n  }, [fileRejections]);\n\n  // const rejected = fileRejections !== undefined ? fileRejections.length : 0;\n  // const accepted = acceptedFiles !== undefined ? acceptedFiles.length : 0;\n\n  return (\n    <Container>\n      <Box border={1} m={1} boxShadow={2} borderRadius=\"borderRadius\" borderColor=\"grey.500\">\n        <div {...getRootProps({ className: 'dropzone' })}>\n          <input {...getInputProps()} />\n          <Canvas width={320} height={200} imageData={imageData} />\n          <p>Drop image here, or click to select image</p>\n          {/* <p>{rejected} rejected</p> */}\n          {/* <p>{accepted} accepted</p> */}\n        </div>\n      </Box>\n      <Snackbar open={error} autoHideDuration={6000} onClose={() => setError(undefined)}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Snackbar>\n    </Container>\n  );\n}\n\nImageUpload.propTypes = {\n  // callback when image is loaded successfully\n  onload: PropTypes.func.isRequired,\n  imageData: PropTypes.shape()\n};\n\nImageUpload.defaultProps = {\n  imageData: undefined\n};\nexport default ImageUpload;\n","import { ColorSpaces, Quantizer, Converter, GraphicModes, Palettes } from 'retropixels-core';\n\nexport function convertJimpImageToPixelImage(jimpImage) {\n  if (jimpImage === undefined) {\n    return undefined;\n  }\n  const palette = Palettes.all.colodore;\n  const colorspace = ColorSpaces.all.xyz;\n  const quantizer = new Quantizer(palette, colorspace);\n  const converter = new Converter(quantizer);\n\n  const graphicMode = GraphicModes.all.bitmap;\n  const result = graphicMode({});\n\n  converter.convert(jimpImage.bitmap, result);\n  return result;\n}\n\nexport function getImageDataFromJimpImage(jimpImage) {\n  if (jimpImage === undefined) {\n    return undefined;\n  }\n\n  // TODO: Jimp does not seem to shrink the data array when resizing picture to a smaller size... Confirm?\n  const dataSize = jimpImage.bitmap.width * jimpImage.bitmap.height * 4;\n  let data;\n  if (jimpImage.bitmap.data.length > dataSize) {\n    data = jimpImage.bitmap.data.slice(0, dataSize);\n  } else {\n    data = jimpImage.bitmap.data;\n  }\n\n  return jimpImage !== undefined\n    ? new ImageData(Uint8ClampedArray.from(data), jimpImage.bitmap.width, jimpImage.bitmap.height)\n    : undefined;\n}\n\nexport function clearJimpImage(jimpImage) {\n  jimpImage.scan(0, 0, jimpImage.bitmap.width, jimpImage.bitmap.height, (x, y, idx) => {\n    // this is the image\n\n    jimpImage.bitmap.data[idx + 0] = 0;\n    jimpImage.bitmap.data[idx + 1] = 0;\n    jimpImage.bitmap.data[idx + 2] = 0;\n    jimpImage.bitmap.data[idx + 3] = 0;\n  });\n}\n\nexport function getImageDataFromPixelImage(pixelImage) {\n  if (pixelImage === undefined) {\n    return new ImageData(1, 1);\n  }\n  const imageWidth = pixelImage.mode.width * pixelImage.mode.pixelWidth;\n  // const imageWidth = pixelImage.mode.width;\n  const imageData = new ImageData(imageWidth, pixelImage.mode.height);\n  for (let y = 0; y < pixelImage.mode.height; y++) {\n    for (let x = 0; x < pixelImage.mode.width; x++) {\n      const paletteIndex = pixelImage.peek(x, y);\n      const pixelValue = paletteIndex !== undefined ? Palettes.all.colodore.get(paletteIndex) : [0, 0, 0, 0];\n      for (let xx = 0; xx < pixelImage.mode.pixelWidth; xx++) {\n        const index = y * 4 * imageWidth + x * pixelImage.mode.pixelWidth * 4 + xx * 4;\n        imageData.data[index] = pixelValue[0];\n        imageData.data[index + 1] = pixelValue[1];\n        imageData.data[index + 2] = pixelValue[2];\n        imageData.data[index + 3] = 0xff;\n      }\n      // Pixels.poke(imageData.data, x, y, pixelValue);\n    }\n  }\n  return imageData;\n}\n\nexport function parseFilename(filename) {\n  const periodPos = filename.lastIndexOf('.');\n  const extension = filename.substring(periodPos + 1, filename.length);\n  const basename = filename.substring(0, Math.min(30, periodPos));\n  return { basename, extension };\n}\n\nexport function abbreviateFilename(filename, maxSize) {\n  if (filename.length <= maxSize) {\n    return filename;\n  }\n  const parsed = parseFilename(filename);\n\n  return `${parsed.basename.substring(0, maxSize)}...${parsed.extension}`;\n}\n\nexport default {\n  getImageDataFromJimpImage\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nfunction ProfileSelection(props) {\n  const { label, value, items, onChange } = props;\n\n  return (\n    <FormControl component=\"fieldset\">\n      <FormLabel component=\"legend\">{label}</FormLabel>\n      <RadioGroup\n        row\n        aria-label={label}\n        name={`select${label}`}\n        value={value}\n        onChange={event => onChange(event.target.value)}\n      >\n        {items.map(i => (\n          <FormControlLabel value={i} control={<Radio />} label={i} />\n        ))}\n      </RadioGroup>\n    </FormControl>\n  );\n}\n\nProfileSelection.propTypes = {\n  label: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  items: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nProfileSelection.defaultProps = {\n  label: 'Choose'\n};\n\nexport default ProfileSelection;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport * as Jimp from 'jimp';\nimport { Container } from '@material-ui/core';\nimport ImageUpload from './ImageUpload';\nimport { abbreviateFilename, clearJimpImage, getImageDataFromJimpImage } from './Utilities';\nimport ProfileSelection from './ProfileSelection';\n\n// https://www.reddit.com/r/cemu/comments/aq2wbs/scale_filter_comparison_bilinear_vs_bicubic_vs/\n// Let user upload image, scale it, and call callback with a jimpimage\nfunction SourceImage(props) {\n  const { onChanged } = props;\n\n  const [uploadedImage, setUploadedImage] = useState(undefined);\n  const [image, setImage] = useState(undefined);\n  const [imageData, setImageData] = useState(undefined);\n  const [scale, setScale] = useState('fill');\n  const [filename, setFilename] = useState('input');\n\n  function onUploaded(newUploadedImage) {\n    setUploadedImage(newUploadedImage.jimpImage);\n    setFilename(newUploadedImage.filename);\n  }\n\n  function cropJimpImage(jimpImage) {\n    const isTooSmall = jimpImage.bitmap.width < 320 || jimpImage.bitmap.height < 200;\n    let blitImage;\n\n    // if the image is too small, the cropped image is cleared,\n    // and then the smaller image is blitted onto it\n    // this is a workaround for artifacts when cropping images to larger sizes\n    if (isTooSmall) {\n      blitImage = jimpImage.clone();\n    }\n    jimpImage.crop(0, 0, 320, 200);\n    if (blitImage !== undefined) {\n      clearJimpImage(jimpImage);\n      jimpImage.blit(blitImage, 0, 0);\n    }\n  }\n\n  useEffect(() => {\n    if (uploadedImage === undefined) {\n      return;\n    }\n\n    const newImage = uploadedImage.clone();\n    if (scale === 'fill') {\n      newImage.cover(320, 200, Jimp.RESIZE_HERMITE);\n    } else if (scale === 'fit') {\n      newImage.contain(320, 200, Jimp.RESIZE_HERMITE);\n    } else {\n      cropJimpImage(newImage);\n    }\n    setImage(newImage);\n  }, [uploadedImage, scale]);\n\n  useEffect(() => {\n    onChanged({ jimpImage: image, filename });\n    setImageData(getImageDataFromJimpImage(image));\n  }, [image, onChanged, filename]);\n\n  return (\n    <>\n      <h4>{abbreviateFilename(filename, 30)}</h4>\n      <Container>\n        <ImageUpload imageData={imageData} onload={onUploaded} />\n      </Container>\n      <Container align=\"left\">\n        <ProfileSelection\n          label=\"cropping\"\n          items={['crop', 'fill', 'fit']}\n          value={scale}\n          onChange={value => {\n            setScale(value);\n          }}\n        />\n      </Container>\n    </>\n  );\n}\n\nSourceImage.propTypes = {\n  onChanged: PropTypes.func.isRequired\n};\n\nexport default SourceImage;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Container, Grid, Typography, FormControlLabel, Checkbox, Slider } from '@material-ui/core';\nimport Brightness5OutlinedIcon from '@material-ui/icons/Brightness5Outlined';\nimport Brightness6OutlinedIcon from '@material-ui/icons/Brightness6Outlined';\nimport BrokenImageOutlinedIcon from '@material-ui/icons/BrokenImageOutlined';\nimport BlurOnOutlinedIcon from '@material-ui/icons/BlurOnOutlined';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\n// import FormatColorResetOutlinedIcon from '@material-ui/icons/FormatColorResetOutlined';\nimport { getImageDataFromJimpImage } from './Utilities';\nimport Canvas from './Canvas';\n\nfunction ImagePreProcessor(props) {\n  const { jimpImage, onChanged } = props;\n\n  // defaults\n\n  const normalizeDefault = true;\n  const greyscaleDefault = false;\n  const mirrorHorDefault = false;\n  const mirrorVerDefault = false;\n  const invertDefault = false;\n  const brightnessDefault = 0;\n  const contrastDefault = 0;\n  const blurDefault = 0;\n  const thresholdDefault = 0;\n\n  const [image, setImage] = useState(undefined);\n  const [imageData, setImageData] = useState(undefined);\n  const [normalize, setNormalize] = useState(normalizeDefault);\n  const [greyscale, setGreyscale] = useState(greyscaleDefault);\n  const [mirrorHor, setMirrorHor] = useState(mirrorHorDefault);\n  const [mirrorVer, setMirrorVer] = useState(mirrorVerDefault);\n  const [invert, setInvert] = useState(invertDefault);\n  const [brightness, setBrightness] = useState(brightnessDefault);\n  const [contrast, setContrast] = useState(contrastDefault);\n  const [blur, setBlur] = useState(blurDefault);\n  const [threshold, setThreshold] = useState(thresholdDefault);\n  // const [saturation, setSaturation] = useState(0);\n\n  function reset() {\n    setNormalize(normalizeDefault);\n    setGreyscale(greyscaleDefault);\n    setMirrorHor(mirrorHorDefault);\n    setMirrorVer(mirrorVerDefault);\n    setInvert(invertDefault);\n    setBrightness(brightnessDefault);\n    setContrast(contrastDefault);\n    setBlur(blurDefault);\n    setThreshold(thresholdDefault);\n  }\n\n  useEffect(() => {\n    onChanged(image);\n    setImageData(getImageDataFromJimpImage(image));\n  }, [image, onChanged]);\n\n  useEffect(() => {\n    if (jimpImage === undefined) {\n      return;\n    }\n    const newImage = jimpImage.clone();\n\n    if (greyscale) {\n      newImage.greyscale();\n    }\n    if (normalize) {\n      newImage.normalize();\n    }\n\n    newImage.brightness(brightness);\n    newImage.contrast(contrast);\n\n    if (blur > 0) {\n      newImage.blur(blur);\n    }\n\n    newImage.mirror(mirrorHor, mirrorVer);\n\n    if (invert) {\n      newImage.invert();\n    }\n\n    if (threshold > 0) {\n      newImage.threshold({ max: threshold, autoGreyscale: false });\n    }\n\n    // const colorAdjustments = [];\n\n    // if (saturation > 0) {\n    //   colorAdjustments.push({ apply: 'saturate', params: [saturation] });\n    // }\n    // if (saturation < 0) {\n    //   colorAdjustments.push({ apply: 'desaturate', params: [-saturation] });\n    // }\n    //\n    // if (colorAdjustments.length > 0) {\n    //   newImage.color(colorAdjustments);\n    // }\n\n    setImage(newImage);\n  }, [jimpImage, normalize, brightness, contrast, greyscale, blur, mirrorHor, mirrorVer, invert, threshold]);\n\n  const defaultsSet =\n    normalize === normalizeDefault &&\n    greyscale === greyscaleDefault &&\n    mirrorHor === mirrorHorDefault &&\n    mirrorVer === mirrorVerDefault &&\n    invert === invertDefault &&\n    contrast === contrastDefault &&\n    brightness === brightnessDefault &&\n    blur === blurDefault &&\n    threshold === thresholdDefault;\n\n  return (\n    <>\n      <h4>pre-processing</h4>\n      <Container>\n        <Canvas width={320} height={200} imageData={imageData} />\n      </Container>\n      <Container>\n        <Button variant=\"contained\" disabled={defaultsSet} onClick={() => reset()}>\n          <AutorenewIcon /> &nbsp; defaults\n        </Button>\n      </Container>\n\n      <Container align=\"left\">\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={normalize}\n              onChange={() => {\n                setNormalize(!normalize);\n              }}\n              name=\"normalizeCheckbox\"\n            />\n          }\n          label=\"normalize\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={greyscale}\n              onChange={() => {\n                setGreyscale(!greyscale);\n              }}\n              name=\"greyscaleCheckbox\"\n            />\n          }\n          label=\"greyscale\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={invert}\n              onChange={() => {\n                setInvert(!invert);\n              }}\n              name=\"invertCheckbox\"\n            />\n          }\n          label=\"invert\"\n        />\n      </Container>\n      <Container align=\"left\">\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={mirrorHor}\n              onChange={() => {\n                setMirrorHor(!mirrorHor);\n              }}\n              name=\"mirrorHorCheckbox\"\n            />\n          }\n          label=\"flip horizontal\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={mirrorVer}\n              onChange={() => {\n                setMirrorVer(!mirrorVer);\n              }}\n              name=\"mirrorVerCheckbox\"\n            />\n          }\n          label=\"flip vertical\"\n        />\n      </Container>\n      <Typography gutterBottom align=\"left\">\n        brightness\n      </Typography>\n      <Grid container>\n        <Grid item>\n          <Brightness5OutlinedIcon /> &nbsp;\n        </Grid>\n        <Grid item xs>\n          <Slider\n            min={-1.0}\n            max={1.0}\n            step={0.05}\n            value={brightness}\n            onChange={(event, newValue) => setBrightness(newValue)}\n            valueLabelDisplay=\"auto\"\n          />\n        </Grid>\n      </Grid>\n      <Typography gutterBottom align=\"left\">\n        contrast\n      </Typography>\n      <Grid container>\n        <Grid item>\n          <Brightness6OutlinedIcon /> &nbsp;\n        </Grid>\n        <Grid item xs>\n          <Slider\n            min={-1.0}\n            max={1.0}\n            step={0.05}\n            value={contrast}\n            onChange={(event, newValue) => setContrast(newValue)}\n            valueLabelDisplay=\"auto\"\n          />\n        </Grid>\n      </Grid>\n\n      <Typography gutterBottom align=\"left\">\n        blur\n      </Typography>\n      <Grid container>\n        <Grid item>\n          <BlurOnOutlinedIcon /> &nbsp;\n        </Grid>\n        <Grid item xs>\n          <Slider\n            min={0}\n            max={10}\n            value={blur}\n            onChange={(event, newValue) => setBlur(newValue)}\n            valueLabelDisplay=\"auto\"\n          />\n        </Grid>\n      </Grid>\n\n      <Typography gutterBottom align=\"left\">\n        threshold\n      </Typography>\n      <Grid container>\n        <Grid item>\n          <BrokenImageOutlinedIcon /> &nbsp;\n        </Grid>\n        <Grid item xs>\n          <Slider min={0} max={255} value={threshold} onChange={(event, newValue) => setThreshold(newValue)} />\n        </Grid>\n      </Grid>\n\n      {/* <Typography variant=\"h5\">color adjustments (slow)</Typography> */}\n      {/* <Typography gutterBottom>saturation</Typography> */}\n      {/* <Grid container> */}\n      {/*   <Grid item> */}\n      {/*     <FormatColorResetOutlinedIcon /> */}\n      {/*   </Grid> */}\n      {/*   <Grid item xs> */}\n      {/*     <Slider */}\n      {/*       min={-100} */}\n      {/*       max={100} */}\n      {/*       value={saturation} */}\n      {/*       onChange={(event, newValue) => setSaturation(newValue)} */}\n      {/*       valueLabelDisplay=\"on\" */}\n      {/*     /> */}\n      {/*   </Grid> */}\n      {/* </Grid> */}\n    </>\n  );\n}\n\nImagePreProcessor.propTypes = {\n  jimpImage: PropTypes.shape(),\n  onChanged: PropTypes.func.isRequired\n};\n\nImagePreProcessor.defaultProps = {\n  jimpImage: undefined\n};\n\nexport default ImagePreProcessor;\n","import React, { useEffect, useState } from 'react';\nimport { ColorSpaces, Quantizer, Converter, GraphicModes, Palettes } from 'retropixels-core';\nimport PropTypes from 'prop-types';\nimport OrderedDither from 'retropixels-core/target/conversion/OrderedDither';\nimport { getImageDataFromPixelImage } from './Utilities';\nimport Canvas from './Canvas';\n\nfunction TargetImage(props) {\n  const graphicMode = GraphicModes.all.bitmap;\n\n  const { jimpImage, onChanged, hires, colorspaceId, paletteId, ditherId, ditherRadius } = props;\n\n  const defaultQuantizer = new Quantizer(Palettes.all[paletteId], ColorSpaces.all[colorspaceId]);\n  const defaultConverter = new Converter(defaultQuantizer);\n  const defaultDitherer = new OrderedDither(OrderedDither.presets[ditherId], ditherRadius);\n\n  const [pixelImage, setPixelImage] = useState(undefined);\n  const [imageData, setImageData] = useState(undefined);\n\n  const [quantizer, setQuantizer] = useState(defaultQuantizer);\n  const [converter, setConverter] = useState(defaultConverter);\n  const [ditherer, setDitherer] = useState(defaultDitherer);\n\n  useEffect(() => {\n    setQuantizer(new Quantizer(Palettes.all[paletteId], ColorSpaces.all[colorspaceId]));\n  }, [colorspaceId, paletteId]);\n\n  useEffect(() => {\n    setConverter(new Converter(quantizer));\n  }, [quantizer]);\n\n  useEffect(() => {\n    setDitherer(new OrderedDither(OrderedDither.presets[ditherId], ditherRadius));\n  }, [ditherId, ditherRadius]);\n\n  useEffect(() => {\n    if (jimpImage !== undefined) {\n      const newPixelImage = graphicMode({ hires });\n      const resizedImage = jimpImage.clone();\n      resizedImage.resize(newPixelImage.mode.width, newPixelImage.mode.height);\n      if (ditherId !== 'none') {\n        ditherer.dither(resizedImage.bitmap);\n      }\n      // TODO: this is a workaround for a bug in dithering\n      // that clears the alpha channel\n      resizedImage.opaque();\n\n      converter.convert(resizedImage.bitmap, newPixelImage);\n      setPixelImage(newPixelImage);\n    }\n  }, [jimpImage, converter, ditherer, hires, graphicMode]);\n\n  useEffect(() => {\n    setImageData(getImageDataFromPixelImage(pixelImage));\n    onChanged(pixelImage);\n  }, [pixelImage, onChanged]);\n\n  return (\n    <>\n      <Canvas width={320} height={200} imageData={imageData} />\n    </>\n  );\n}\n\nTargetImage.propTypes = {\n  jimpImage: PropTypes.shape(),\n  onChanged: PropTypes.func,\n  hires: PropTypes.bool,\n  colorspaceId: PropTypes.string,\n  paletteId: PropTypes.string,\n  ditherId: PropTypes.string,\n  ditherRadius: PropTypes.number\n};\n\nTargetImage.defaultProps = {\n  jimpImage: undefined,\n  onChanged: () => {},\n  hires: false,\n  colorspaceId: 'xyz',\n  paletteId: 'colodore',\n  ditherId: 'bayer4x4',\n  ditherRadius: 32\n};\n\nexport default TargetImage;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n// import Jimp from 'jimp/es';\nimport { Button, Container, Grid, Slider, Typography, Checkbox, FormControlLabel } from '@material-ui/core';\nimport BlurLinearIcon from '@material-ui/icons/BlurLinear';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport { C64Writer } from 'retropixels-core';\nimport { saveAs } from 'file-saver';\nimport ProfileSelection from './ProfileSelection';\nimport TargetImage from './TargetImage';\nimport { parseFilename } from './Utilities';\n\n// wraps the Targetimage with controls for the various properties\nfunction Retropixels(props) {\n  const ditherOptions = ['none', 'bayer2x2', 'bayer4x4', 'bayer8x8'];\n  const colorspaceOptions = ['rgb', 'yuv', 'xyz', 'rainbow'];\n  const paletteOptions = ['colodore', 'pepto', 'deekay'];\n\n  // defaults\n\n  const ditherDefault = 'bayer4x4';\n  const paletteDefault = 'colodore';\n  const colorspaceDefault = 'xyz';\n  const hiresDefault = false;\n  const ditherRadiusDefault = 32;\n\n  const { jimpImage, filename } = props;\n\n  const [pixelImage, setPixelImage] = useState(undefined);\n  const [colorspace, setColorSpace] = useState(colorspaceDefault);\n  const [palette, setPalette] = useState(paletteDefault);\n  const [hires, setHires] = useState(hiresDefault);\n  const [dither, setDither] = useState(ditherDefault);\n  const [ditherRadius, setDitherRadius] = useState(ditherRadiusDefault);\n\n  let targetFilename = 'output';\n  if (pixelImage !== undefined) {\n    const extension = pixelImage.mode.pixelWidth === 1 ? '.art' : '.kla';\n    const parsedFilename = parseFilename(filename);\n    targetFilename = `${parsedFilename.basename.substring(0, 30)}${extension}`;\n  }\n\n  function onNewPixelImage(newPixelImage) {\n    setPixelImage(newPixelImage);\n  }\n\n  function reset() {\n    setColorSpace(colorspaceDefault);\n    setPalette(paletteDefault);\n    setHires(hiresDefault);\n    setDither(ditherDefault);\n    setDitherRadius(ditherRadiusDefault);\n  }\n\n  function saveOutput() {\n    const binary = C64Writer.toBinary(pixelImage);\n    const buffer = C64Writer.toBuffer(binary);\n    const blob = new Blob([buffer], { type: 'application/octet-stream' });\n    saveAs(blob, targetFilename);\n  }\n\n  // function savePNG() {\n  //   JimpPreprocessor.toJimpImage(pixelImage, Palettes.all[palette]).then(outputJimpImage => {\n  //     outputJimpImage.image\n  //       .getBufferAsync(Jimp.MIME_PNG)\n  //       .then(buffer => {\n  //         const blob = new Blob([buffer], { type: 'application/octet-stream' });\n  //         saveAs(blob, 'test.png');\n  //       })\n  //       .catch(error => alert(error));\n  //   });\n  // }\n\n  let outputFormat = 'output';\n  if (pixelImage !== undefined) {\n    outputFormat = pixelImage.mode.pixelWidth === 1 ? 'Art studio' : 'Koala painter';\n  }\n\n  const defaultsSet =\n    colorspace === colorspaceDefault &&\n    palette === paletteDefault &&\n    hires === hiresDefault &&\n    dither === ditherDefault &&\n    ditherRadius === ditherRadiusDefault;\n\n  return (\n    <>\n      <h4>{outputFormat} file</h4>\n      <Container>\n        <TargetImage\n          jimpImage={jimpImage}\n          onChanged={onNewPixelImage}\n          hires={hires}\n          colorspaceId={colorspace}\n          paletteId={palette}\n          ditherId={dither}\n          ditherRadius={ditherRadius}\n        />\n      </Container>\n      <Container>\n        <Grid container>\n          <Grid item xs>\n            <Button variant=\"contained\" disabled={defaultsSet} onClick={() => reset()}>\n              <AutorenewIcon /> &nbsp; defaults\n            </Button>\n          </Grid>\n          <Grid item xs>\n            <Button\n              variant=\"contained\"\n              disabled={pixelImage === undefined}\n              color=\"primary\"\n              onClick={() => saveOutput()}\n            >\n              <CloudDownloadIcon /> &nbsp; Download\n            </Button>\n          </Grid>\n        </Grid>\n      </Container>\n      <Container align=\"left\">\n        {/* TODO: use generic checkbox */}\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={hires}\n              onChange={() => {\n                setHires(!hires);\n              }}\n              name=\"mirrorHorCheckbox\"\n            />\n          }\n          label=\"hires\"\n        />\n      </Container>\n      <Container align=\"left\">\n        <ProfileSelection\n          label=\"colorspace\"\n          value={colorspace}\n          items={colorspaceOptions}\n          onChange={value => setColorSpace(value)}\n        />\n        <ProfileSelection\n          label=\"palette\"\n          value={palette}\n          items={paletteOptions}\n          onChange={value => setPalette(value)}\n        />\n        <ProfileSelection label=\"dithering\" value={dither} items={ditherOptions} onChange={value => setDither(value)} />\n        <Typography gutterBottom align=\"left\">\n          dithering strength\n        </Typography>\n        <Grid container>\n          <Grid item>\n            <BlurLinearIcon /> &nbsp;\n          </Grid>\n          <Grid item xs>\n            <Slider\n              disabled={dither === 'none'}\n              min={0}\n              max={64}\n              value={ditherRadius}\n              onChange={(event, newValue) => setDitherRadius(newValue)}\n              valueLabelDisplay=\"auto\"\n            />\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nRetropixels.propTypes = {\n  jimpImage: PropTypes.shape(),\n  filename: PropTypes.string\n};\n\nRetropixels.defaultProps = {\n  jimpImage: undefined,\n  filename: 'output'\n};\n\nexport default Retropixels;\n","import React, { useEffect, useState } from 'react';\nimport { Grid } from '@material-ui/core';\nimport './App.css';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SourceImage from './SourceImage';\nimport ImagePreProcessor from './ImagePreProcessor';\nimport Retropixels from './Retropixels';\n\n// https://github.com/harishmahamure/photoCompress\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nfunction App() {\n  const [sourceImage, setSourceImage] = useState(undefined);\n  const [processedImage, setProcessedImage] = useState(undefined);\n  const [filename, setFilename] = useState(undefined);\n\n  const classes = useStyles();\n\n  function onSourceImageChanged(newSourceImage) {\n    setSourceImage(newSourceImage.jimpImage);\n    setFilename(newSourceImage.filename);\n  }\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">Retropixels</header> */}\n      <body className=\"App-body\">\n        <div className={classes.root}>\n          <AppBar position=\"static\">\n            <Toolbar variant=\"dense\">\n              <Typography variant=\"h6\" className={classes.title}>\n                Retropixels\n              </Typography>\n              <Button color=\"inherit\" href=\"https://github.com/micheldebree/retropixels\">\n                <GitHubIcon />\n              </Button>\n            </Toolbar>\n          </AppBar>\n        </div>\n        <Grid container spacing={3}>\n          <Grid item xs>\n            <SourceImage onChanged={onSourceImageChanged} />\n          </Grid>\n          <Grid item xs>\n            <ImagePreProcessor jimpImage={sourceImage} onChanged={jimpImage => setProcessedImage(jimpImage)} />\n          </Grid>\n          <Grid item xs>\n            <Retropixels jimpImage={processedImage} filename={filename}/>\n          </Grid>\n        </Grid>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}