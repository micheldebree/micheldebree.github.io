{"version":3,"sources":["Utilities.js","Canvas.jsx","ImageUpload.jsx","ProfileSelection.jsx","ImagePreProcessor.jsx","TargetImage.jsx","Retropixels.jsx","logo.svg","version.js","App.jsx","reportWebVitals.js","index.jsx"],"names":["getImageDataFromJimpImage","jimpImage","undefined","data","dataSize","bitmap","width","height","length","slice","ImageData","Uint8ClampedArray","from","parseFilename","filename","periodPos","lastIndexOf","extension","substring","basename","Math","min","abbreviateFilename","maxSize","parsed","Canvas","props","canvasRef","React","useRef","imageData","useEffect","current","getContext","putImageData","Box","m","ref","defaultProps","ImageUpload","onload","useState","error","setError","useDropzone","accept","maxFiles","acceptedFiles","fileRejections","getRootProps","getInputProps","file","reader","FileReader","onabort","onerror","Jimp","read","result","then","img","name","catch","err","message","readAsArrayBuffer","readFile","rejectedFile","errorMessages","errors","map","e","reduce","a","path","Container","border","boxShadow","borderRadius","borderColor","className","Snackbar","open","autoHideDuration","onClose","Alert","severity","ProfileSelection","label","value","items","onChange","FormControl","component","FormLabel","RadioGroup","row","aria-label","event","target","i","FormControlLabel","control","Radio","ImagePreProcessor","onChanged","normalizeDefault","greyscaleDefault","mirrorHorDefault","mirrorVerDefault","invertDefault","sourceImage","setSourceImage","croppedImage","setCroppedImage","image","setImage","setFilename","setImageData","scale","setScale","normalize","setNormalize","greyscale","setGreyscale","mirrorHor","setMirrorHor","mirrorVer","setMirrorVer","invert","setInvert","brightness","setBrightness","contrast","setContrast","blur","setBlur","threshold","setThreshold","newImage","clone","cover","contain","blitImage","crop","this","clearJimpImage","blit","cropJimpImage","mirror","max","autoGreyscale","defaultsSet","newUploadedImage","align","Button","size","disabled","startIcon","onClick","Checkbox","checked","Grid","container","item","xs","Slider","step","newValue","valueLabelDisplay","TargetImage","graphicMode","GraphicModes","all","hires","colorspaceId","paletteId","ditherId","ditherRadius","defaultQuantizer","Quantizer","Palettes","ColorSpaces","defaultConverter","Converter","defaultDitherer","OrderedDither","presets","pixelImage","setPixelImage","quantizer","setQuantizer","converter","setConverter","ditherer","setDitherer","newPixelImage","resizedImage","resize","mode","dither","opaque","convert","imageWidth","pixelWidth","y","x","paletteIndex","peek","pixelValue","colodore","get","xx","index","getImageDataFromPixelImage","Retropixels","ditherDefault","paletteDefault","colorspaceDefault","hiresDefault","colorspace","setColorSpace","palette","setPalette","setHires","setDither","setDitherRadius","targetFilename","parsedFilename","outputFormat","variant","color","binary","C64Writer","toBinary","buffer","toBuffer","blob","Blob","type","saveAs","saveOutput","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","App","classes","AppBar","position","Toolbar","src","Logo","alt","Typography","Link","href","AppVersion","newSourceImage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b672aa1c.chunk.js","sourcesContent":["import { ColorSpaces, Quantizer, Converter, GraphicModes, Palettes } from 'retropixels-core';\n\nexport function convertJimpImageToPixelImage(jimpImage) {\n  if (jimpImage === undefined) {\n    return undefined;\n  }\n  const palette = Palettes.all.colodore;\n  const colorspace = ColorSpaces.all.xyz;\n  const quantizer = new Quantizer(palette, colorspace);\n  const converter = new Converter(quantizer);\n\n  const graphicMode = GraphicModes.all.bitmap;\n  const result = graphicMode({});\n\n  converter.convert(jimpImage.bitmap, result);\n  return result;\n}\n\nexport function getImageDataFromJimpImage(jimpImage) {\n  if (jimpImage === undefined) {\n    return undefined;\n  }\n\n  // TODO: Jimp does not seem to shrink the data array when resizing picture to a smaller size... Confirm?\n  const dataSize = jimpImage.bitmap.width * jimpImage.bitmap.height * 4;\n  let data;\n  if (jimpImage.bitmap.data.length > dataSize) {\n    data = jimpImage.bitmap.data.slice(0, dataSize);\n  } else {\n    data = jimpImage.bitmap.data;\n  }\n\n  return jimpImage !== undefined\n    ? new ImageData(Uint8ClampedArray.from(data), jimpImage.bitmap.width, jimpImage.bitmap.height)\n    : undefined;\n}\n\nexport function cropJimpImage(jimpImage) {\n  const isTooSmall = jimpImage.bitmap.width < 320 || jimpImage.bitmap.height < 200;\n  let blitImage;\n\n  // if the image is too small, the cropped image is cleared,\n  // and then the smaller image is blitted onto it\n  // this is a workaround for artifacts when cropping images to larger sizes\n  if (isTooSmall) {\n    blitImage = jimpImage.clone();\n  }\n  jimpImage.crop(0, 0, 320, 200);\n  if (blitImage !== undefined) {\n    this.clearJimpImage(jimpImage);\n    jimpImage.blit(blitImage, 0, 0);\n  }\n}\n\nexport function clearJimpImage(jimpImage) {\n  jimpImage.scan(0, 0, jimpImage.bitmap.width, jimpImage.bitmap.height, (x, y, idx) => {\n    // this is the image\n\n    jimpImage.bitmap.data[idx + 0] = 0;\n    jimpImage.bitmap.data[idx + 1] = 0;\n    jimpImage.bitmap.data[idx + 2] = 0;\n    jimpImage.bitmap.data[idx + 3] = 0;\n  });\n}\n\nexport function getImageDataFromPixelImage(pixelImage) {\n  if (pixelImage === undefined) {\n    return new ImageData(1, 1);\n  }\n  const imageWidth = pixelImage.mode.width * pixelImage.mode.pixelWidth;\n  // const imageWidth = pixelImage.mode.width;\n  const imageData = new ImageData(imageWidth, pixelImage.mode.height);\n  for (let y = 0; y < pixelImage.mode.height; y++) {\n    for (let x = 0; x < pixelImage.mode.width; x++) {\n      const paletteIndex = pixelImage.peek(x, y);\n      const pixelValue = paletteIndex !== undefined ? Palettes.all.colodore.get(paletteIndex) : [0, 0, 0, 0];\n      for (let xx = 0; xx < pixelImage.mode.pixelWidth; xx++) {\n        const index = y * 4 * imageWidth + x * pixelImage.mode.pixelWidth * 4 + xx * 4;\n        imageData.data[index] = pixelValue[0];\n        imageData.data[index + 1] = pixelValue[1];\n        imageData.data[index + 2] = pixelValue[2];\n        imageData.data[index + 3] = 0xff;\n      }\n      // Pixels.poke(imageData.data, x, y, pixelValue);\n    }\n  }\n  return imageData;\n}\n\nexport function parseFilename(filename) {\n  const periodPos = filename.lastIndexOf('.');\n  const extension = filename.substring(periodPos + 1, filename.length);\n  const basename = filename.substring(0, Math.min(30, periodPos));\n  return { basename, extension };\n}\n\nexport function abbreviateFilename(filename, maxSize) {\n  if (filename.length <= maxSize) {\n    return filename;\n  }\n  const parsed = parseFilename(filename);\n\n  return `${parsed.basename.substring(0, maxSize)}...${parsed.extension}`;\n}\n\nexport default {\n  getImageDataFromJimpImage\n};\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from '@material-ui/core';\n\n// https://blog.koenvangilst.nl/react-hooks-with-canvas/\n// https://www.w3schools.com/Tags/canvas_putimagedata.asp\n\nfunction Canvas(props) {\n  const canvasRef = React.useRef(null);\n  const getContext = () => canvasRef.current.getContext('2d');\n\n  const { width, height, imageData } = props;\n\n  // if imagedata property is set/changes, draw it on the canvas\n  useEffect(() => {\n    if (imageData !== undefined) {\n      getContext().putImageData(imageData, 0, 0);\n    }\n  }, [imageData]);\n\n  return (\n    <Box m={1}>\n      <canvas ref={canvasRef} width={width} height={height} />\n    </Box>\n  );\n}\n\n// TODO: get width and height from imagedata\nCanvas.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  imageData: PropTypes.shape()\n};\n\nCanvas.defaultProps = {\n  imageData: undefined\n};\n\nexport default Canvas;\n","import React, { useState, useEffect } from 'react';\nimport Jimp from 'jimp/es';\nimport PropTypes from 'prop-types';\nimport { useDropzone } from 'react-dropzone';\nimport { Container, Box, Snackbar } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport Canvas from './Canvas';\n\n// TODO: return Jimp Image\n// TODO: Only accept image types\n\n// Let's the user select an image file\n// When a valid image is selected, calls the \"onload\" callback with a JimpImage object.\nfunction ImageUpload(props) {\n  const { onload, imageData } = props;\n\n  const [error, setError] = useState(undefined);\n  const { acceptedFiles, fileRejections, getRootProps, getInputProps } = useDropzone({\n    accept: 'image/*',\n    maxFiles: 1\n  });\n\n  useEffect(() => {\n    const readFile = file => {\n      const reader = new FileReader();\n\n      reader.onabort = () => setError('file reading was aborted');\n      reader.onerror = () => setError('file reading has failed');\n      reader.onload = () => {\n        Jimp.read(reader.result)\n          .then(img => {\n            setError(undefined);\n            onload({ jimpImage: img, filename: file.name });\n          })\n          .catch(err => {\n            setError(err.message);\n          });\n      };\n      reader.readAsArrayBuffer(file);\n    };\n    if (acceptedFiles !== undefined && acceptedFiles.length === 1) {\n      readFile(acceptedFiles[0]);\n    }\n  }, [acceptedFiles]);\n\n  useEffect(() => {\n    if (fileRejections !== undefined && fileRejections.length > 0) {\n      const rejectedFile = fileRejections[0];\n      const errorMessages = rejectedFile.errors.map(e => e.message).reduce((a, e) => `${a},${e}`);\n      setError(`Cannot load ${rejectedFile.file.path}: ${errorMessages}`);\n    }\n  }, [fileRejections]);\n\n  return (\n    <Container>\n      <Box border={1} m={1} boxShadow={2} borderRadius=\"borderRadius\" borderColor=\"grey.500\">\n        <div {...getRootProps({ className: 'dropzone' })}>\n          <input {...getInputProps()} />\n          <Canvas width={320} height={200} imageData={imageData} />\n          <p>Drop image here, or click to select image</p>\n        </div>\n      </Box>\n      <Snackbar open={error} autoHideDuration={6000} onClose={() => setError(undefined)}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Snackbar>\n    </Container>\n  );\n}\n\nImageUpload.propTypes = {\n  // callback when image is loaded successfully\n  onload: PropTypes.func.isRequired,\n  imageData: PropTypes.shape()\n};\n\nImageUpload.defaultProps = {\n  imageData: undefined\n};\nexport default ImageUpload;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nfunction ProfileSelection(props) {\n  const { label, value, items, onChange } = props;\n\n  return (\n    <FormControl component=\"fieldset\">\n      <FormLabel component=\"legend\">{label}</FormLabel>\n      <RadioGroup\n        row\n        aria-label={label}\n        name={`select${label}`}\n        value={value}\n        onChange={event => onChange(event.target.value)}\n      >\n        {items.map(i => (\n          <FormControlLabel value={i} control={<Radio />} label={i} />\n        ))}\n      </RadioGroup>\n    </FormControl>\n  );\n}\n\nProfileSelection.propTypes = {\n  label: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  items: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nProfileSelection.defaultProps = {\n  label: 'Choose'\n};\n\nexport default ProfileSelection;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport * as Jimp from 'jimp';\nimport { Button, Container, Grid, FormControlLabel, Checkbox, Slider, FormLabel } from '@material-ui/core';\nimport Brightness5OutlinedIcon from '@material-ui/icons/Brightness5Outlined';\nimport Brightness6OutlinedIcon from '@material-ui/icons/Brightness6Outlined';\nimport BrokenImageOutlinedIcon from '@material-ui/icons/BrokenImageOutlined';\nimport BlurOnOutlinedIcon from '@material-ui/icons/BlurOnOutlined';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport { getImageDataFromJimpImage, cropJimpImage, abbreviateFilename } from './Utilities';\nimport ImageUpload from './ImageUpload';\nimport ProfileSelection from './ProfileSelection';\n\nfunction ImagePreProcessor(props) {\n  const { onChanged } = props;\n\n  // defaults\n\n  const normalizeDefault = true;\n  const greyscaleDefault = false;\n  const mirrorHorDefault = false;\n  const mirrorVerDefault = false;\n  const invertDefault = false;\n  const brightnessDefault = 0;\n  const contrastDefault = 0;\n  const blurDefault = 0;\n  const thresholdDefault = 0;\n\n  const [sourceImage, setSourceImage] = useState(undefined);\n  const [croppedImage, setCroppedImage] = useState(undefined);\n  const [image, setImage] = useState(undefined);\n  const [filename, setFilename] = useState('input');\n  const [imageData, setImageData] = useState(undefined);\n  const [scale, setScale] = useState('fill');\n  const [normalize, setNormalize] = useState(normalizeDefault);\n  const [greyscale, setGreyscale] = useState(greyscaleDefault);\n  const [mirrorHor, setMirrorHor] = useState(mirrorHorDefault);\n  const [mirrorVer, setMirrorVer] = useState(mirrorVerDefault);\n  const [invert, setInvert] = useState(invertDefault);\n  const [brightness, setBrightness] = useState(brightnessDefault);\n  const [contrast, setContrast] = useState(contrastDefault);\n  const [blur, setBlur] = useState(blurDefault);\n  const [threshold, setThreshold] = useState(thresholdDefault);\n\n  function reset() {\n    setNormalize(normalizeDefault);\n    setGreyscale(greyscaleDefault);\n    setMirrorHor(mirrorHorDefault);\n    setMirrorVer(mirrorVerDefault);\n    setInvert(invertDefault);\n    setBrightness(brightnessDefault);\n    setContrast(contrastDefault);\n    setBlur(blurDefault);\n    setThreshold(thresholdDefault);\n  }\n\n  function onUploaded(newUploadedImage) {\n    setSourceImage(newUploadedImage.jimpImage);\n    setFilename(newUploadedImage.filename);\n  }\n\n  // if the processed image has changed, notify owner\n  useEffect(() => {\n    if (image !== undefined) {\n      onChanged({ jimpImage: image, filename });\n      setImageData(getImageDataFromJimpImage(image));\n    }\n  }, [image, onChanged, filename]);\n\n  // if the source image has changed, apply cropping\n  useEffect(() => {\n    if (sourceImage === undefined) {\n      return;\n    }\n\n    const newImage = sourceImage.clone();\n    if (scale === 'fill') {\n      newImage.cover(320, 200, Jimp.RESIZE_HERMITE);\n    } else if (scale === 'fit') {\n      newImage.contain(320, 200, Jimp.RESIZE_HERMITE);\n    } else {\n      cropJimpImage(newImage);\n    }\n    setCroppedImage(newImage);\n  }, [sourceImage, scale]);\n\n  useEffect(() => {\n    if (croppedImage === undefined) {\n      return;\n    }\n    const newImage = croppedImage.clone();\n\n    if (greyscale) {\n      newImage.greyscale();\n    }\n    if (normalize) {\n      newImage.normalize();\n    }\n\n    newImage.brightness(brightness);\n    newImage.contrast(contrast);\n\n    if (blur > 0) {\n      newImage.blur(blur);\n    }\n\n    newImage.mirror(mirrorHor, mirrorVer);\n\n    if (invert) {\n      newImage.invert();\n    }\n\n    if (threshold > 0) {\n      newImage.threshold({ max: threshold, autoGreyscale: false });\n    }\n\n    setImage(newImage);\n  }, [croppedImage, normalize, brightness, contrast, greyscale, blur, mirrorHor, mirrorVer, invert, threshold]);\n\n  const defaultsSet =\n    normalize === normalizeDefault &&\n    greyscale === greyscaleDefault &&\n    mirrorHor === mirrorHorDefault &&\n    mirrorVer === mirrorVerDefault &&\n    invert === invertDefault &&\n    contrast === contrastDefault &&\n    brightness === brightnessDefault &&\n    blur === blurDefault &&\n    threshold === thresholdDefault;\n\n  return (\n    <>\n      <h4>{abbreviateFilename(filename, 30)}</h4>\n      <Container>\n        <ImageUpload imageData={imageData} onload={onUploaded} />\n      </Container>\n      <Container align=\"left\">\n        <ProfileSelection\n          label=\"cropping\"\n          items={['crop', 'fill', 'fit']}\n          value={scale}\n          onChange={value => {\n            setScale(value);\n          }}\n        />\n      </Container>\n      <Container align=\"left\">\n        <Button size=\"small\" disabled={defaultsSet} startIcon={<AutorenewIcon />} onClick={() => reset()}>\n          defaults\n        </Button>\n      </Container>\n\n      <Container align=\"left\">\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={normalize}\n              onChange={() => {\n                setNormalize(!normalize);\n              }}\n              name=\"normalizeCheckbox\"\n            />\n          }\n          label=\"normalize\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={greyscale}\n              onChange={() => {\n                setGreyscale(!greyscale);\n              }}\n              name=\"greyscaleCheckbox\"\n            />\n          }\n          label=\"greyscale\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={invert}\n              onChange={() => {\n                setInvert(!invert);\n              }}\n              name=\"invertCheckbox\"\n            />\n          }\n          label=\"invert\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={mirrorHor}\n              onChange={() => {\n                setMirrorHor(!mirrorHor);\n              }}\n              name=\"mirrorHorCheckbox\"\n            />\n          }\n          label=\"flip horizontal\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={mirrorVer}\n              onChange={() => {\n                setMirrorVer(!mirrorVer);\n              }}\n              name=\"mirrorVerCheckbox\"\n            />\n          }\n          label=\"flip vertical\"\n        />\n        <FormLabel component=\"legend\">brightness</FormLabel>\n        <Grid container>\n          <Grid item>\n            <Brightness5OutlinedIcon /> &nbsp;\n          </Grid>\n          <Grid item xs>\n            <Slider\n              min={-1.0}\n              max={1.0}\n              step={0.05}\n              value={brightness}\n              onChange={(event, newValue) => setBrightness(newValue)}\n              valueLabelDisplay=\"auto\"\n            />\n          </Grid>\n        </Grid>\n        <FormLabel component=\"legend\">contrast</FormLabel>\n        <Grid container>\n          <Grid item>\n            <Brightness6OutlinedIcon /> &nbsp;\n          </Grid>\n          <Grid item xs>\n            <Slider\n              min={-1.0}\n              max={1.0}\n              step={0.05}\n              value={contrast}\n              onChange={(event, newValue) => setContrast(newValue)}\n              valueLabelDisplay=\"auto\"\n            />\n          </Grid>\n        </Grid>\n        <FormLabel component=\"legend\">blur</FormLabel>\n        <Grid container>\n          <Grid item>\n            <BlurOnOutlinedIcon /> &nbsp;\n          </Grid>\n          <Grid item xs>\n            <Slider\n              min={0}\n              max={10}\n              value={blur}\n              onChange={(event, newValue) => setBlur(newValue)}\n              valueLabelDisplay=\"auto\"\n            />\n          </Grid>\n        </Grid>\n        <FormLabel component=\"legend\">threshold</FormLabel>\n        <Grid container>\n          <Grid item>\n            <BrokenImageOutlinedIcon /> &nbsp;\n          </Grid>\n          <Grid item xs>\n            <Slider\n              min={0}\n              max={255}\n              value={threshold}\n              onChange={(event, newValue) => setThreshold(newValue)}\n              valueLabelDisplay=\"auto\"\n            />\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nImagePreProcessor.propTypes = {\n  onChanged: PropTypes.func.isRequired\n};\n\nexport default ImagePreProcessor;\n","import React, { useEffect, useState } from 'react';\nimport { ColorSpaces, Quantizer, Converter, GraphicModes, Palettes } from 'retropixels-core';\nimport PropTypes from 'prop-types';\nimport OrderedDither from 'retropixels-core/target/conversion/OrderedDither';\nimport { getImageDataFromPixelImage } from './Utilities';\nimport Canvas from './Canvas';\n\nfunction TargetImage(props) {\n  const graphicMode = GraphicModes.all.bitmap;\n\n  const { jimpImage, onChanged, hires, colorspaceId, paletteId, ditherId, ditherRadius } = props;\n\n  const defaultQuantizer = new Quantizer(Palettes.all[paletteId], ColorSpaces.all[colorspaceId]);\n  const defaultConverter = new Converter(defaultQuantizer);\n  const defaultDitherer = new OrderedDither(OrderedDither.presets[ditherId], ditherRadius);\n\n  const [pixelImage, setPixelImage] = useState(undefined);\n  const [imageData, setImageData] = useState(undefined);\n\n  const [quantizer, setQuantizer] = useState(defaultQuantizer);\n  const [converter, setConverter] = useState(defaultConverter);\n  const [ditherer, setDitherer] = useState(defaultDitherer);\n\n  useEffect(() => {\n    setQuantizer(new Quantizer(Palettes.all[paletteId], ColorSpaces.all[colorspaceId]));\n  }, [colorspaceId, paletteId]);\n\n  useEffect(() => {\n    setConverter(new Converter(quantizer));\n  }, [quantizer]);\n\n  useEffect(() => {\n    setDitherer(new OrderedDither(OrderedDither.presets[ditherId], ditherRadius));\n  }, [ditherId, ditherRadius]);\n\n  useEffect(() => {\n    if (jimpImage !== undefined) {\n      const newPixelImage = graphicMode({ hires });\n      const resizedImage = jimpImage.clone();\n      resizedImage.resize(newPixelImage.mode.width, newPixelImage.mode.height);\n      if (ditherId !== 'none') {\n        ditherer.dither(resizedImage.bitmap);\n      }\n      // TODO: this is a workaround for a bug in dithering\n      // that clears the alpha channel\n      resizedImage.opaque();\n\n      converter.convert(resizedImage.bitmap, newPixelImage);\n      setPixelImage(newPixelImage);\n    }\n  }, [jimpImage, converter, ditherer, hires, graphicMode]);\n\n  useEffect(() => {\n    setImageData(getImageDataFromPixelImage(pixelImage));\n    onChanged(pixelImage);\n  }, [pixelImage, onChanged]);\n\n  return (\n    <>\n      <Canvas width={320} height={200} imageData={imageData} />\n    </>\n  );\n}\n\nTargetImage.propTypes = {\n  jimpImage: PropTypes.shape(),\n  onChanged: PropTypes.func,\n  hires: PropTypes.bool,\n  colorspaceId: PropTypes.string,\n  paletteId: PropTypes.string,\n  ditherId: PropTypes.string,\n  ditherRadius: PropTypes.number\n};\n\nTargetImage.defaultProps = {\n  jimpImage: undefined,\n  onChanged: () => {},\n  hires: false,\n  colorspaceId: 'xyz',\n  paletteId: 'colodore',\n  ditherId: 'bayer4x4',\n  ditherRadius: 32\n};\n\nexport default TargetImage;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Container, Grid, Slider, Checkbox, FormControlLabel, FormLabel } from '@material-ui/core';\nimport BlurLinearIcon from '@material-ui/icons/BlurLinear';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport { C64Writer } from 'retropixels-core';\nimport { saveAs } from 'file-saver';\nimport ProfileSelection from './ProfileSelection';\nimport TargetImage from './TargetImage';\nimport { parseFilename } from './Utilities';\n\n// wraps the Targetimage with controls for the various properties\nfunction Retropixels(props) {\n  const ditherOptions = ['none', 'bayer2x2', 'bayer4x4', 'bayer8x8'];\n  const colorspaceOptions = ['rgb', 'yuv', 'xyz', 'rainbow'];\n  const paletteOptions = ['colodore', 'pepto', 'deekay'];\n\n  // defaults\n\n  const ditherDefault = 'bayer4x4';\n  const paletteDefault = 'colodore';\n  const colorspaceDefault = 'xyz';\n  const hiresDefault = false;\n  const ditherRadiusDefault = 32;\n\n  const { jimpImage, filename } = props;\n\n  const [pixelImage, setPixelImage] = useState(undefined);\n  const [colorspace, setColorSpace] = useState(colorspaceDefault);\n  const [palette, setPalette] = useState(paletteDefault);\n  const [hires, setHires] = useState(hiresDefault);\n  const [dither, setDither] = useState(ditherDefault);\n  const [ditherRadius, setDitherRadius] = useState(ditherRadiusDefault);\n\n  let targetFilename = 'output';\n  if (pixelImage !== undefined) {\n    const extension = pixelImage.mode.pixelWidth === 1 ? '.art' : '.kla';\n    const parsedFilename = parseFilename(filename);\n    targetFilename = `${parsedFilename.basename.substring(0, 30)}${extension}`;\n  }\n\n  function onNewPixelImage(newPixelImage) {\n    setPixelImage(newPixelImage);\n  }\n\n  function reset() {\n    setColorSpace(colorspaceDefault);\n    setPalette(paletteDefault);\n    setHires(hiresDefault);\n    setDither(ditherDefault);\n    setDitherRadius(ditherRadiusDefault);\n  }\n\n  function saveOutput() {\n    const binary = C64Writer.toBinary(pixelImage);\n    const buffer = C64Writer.toBuffer(binary);\n    const blob = new Blob([buffer], { type: 'application/octet-stream' });\n    saveAs(blob, targetFilename);\n  }\n\n  // function savePNG() {\n  //   JimpPreprocessor.toJimpImage(pixelImage, Palettes.all[palette]).then(outputJimpImage => {\n  //     outputJimpImage.image\n  //       .getBufferAsync(Jimp.MIME_PNG)\n  //       .then(buffer => {\n  //         const blob = new Blob([buffer], { type: 'application/octet-stream' });\n  //         saveAs(blob, 'test.png');\n  //       })\n  //       .catch(error => alert(error));\n  //   });\n  // }\n\n  let outputFormat = 'output';\n  if (pixelImage !== undefined) {\n    outputFormat = pixelImage.mode.pixelWidth === 1 ? 'art studio file' : 'koala painter file';\n  }\n\n  const defaultsSet =\n    colorspace === colorspaceDefault &&\n    palette === paletteDefault &&\n    hires === hiresDefault &&\n    dither === ditherDefault &&\n    ditherRadius === ditherRadiusDefault;\n\n  return (\n    <>\n      <h4>{outputFormat}</h4>\n      <Container>\n        <TargetImage\n          jimpImage={jimpImage}\n          onChanged={onNewPixelImage}\n          hires={hires}\n          colorspaceId={colorspace}\n          paletteId={palette}\n          ditherId={dither}\n          ditherRadius={ditherRadius}\n        />\n      </Container>\n      <Container>\n        <Button\n          variant=\"contained\"\n          disabled={pixelImage === undefined}\n          color=\"primary\"\n          startIcon={<CloudDownloadIcon />}\n          onClick={() => saveOutput()}\n        >\n          Download\n        </Button>\n      </Container>\n      <Container align=\"left\">\n        <Button size=\"small\" disabled={defaultsSet} startIcon={<AutorenewIcon />} onClick={() => reset()}>\n          defaults\n        </Button>\n      </Container>\n      <Container align=\"left\">\n        {/* TODO: use generic checkbox */}\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={hires}\n              onChange={() => {\n                setHires(!hires);\n              }}\n              name=\"mirrorHorCheckbox\"\n            />\n          }\n          label=\"hires\"\n        />\n      </Container>\n      <Container align=\"left\">\n        <ProfileSelection\n          label=\"colorspace\"\n          value={colorspace}\n          items={colorspaceOptions}\n          onChange={value => setColorSpace(value)}\n        />\n        <ProfileSelection\n          label=\"palette\"\n          value={palette}\n          items={paletteOptions}\n          onChange={value => setPalette(value)}\n        />\n        <ProfileSelection label=\"dithering\" value={dither} items={ditherOptions} onChange={value => setDither(value)} />\n        <FormLabel component=\"legend\">dithering strength</FormLabel>\n        <Grid container>\n          <Grid item>\n            <BlurLinearIcon /> &nbsp;\n          </Grid>\n          <Grid item xs>\n            <Slider\n              disabled={dither === 'none'}\n              min={0}\n              max={64}\n              value={ditherRadius}\n              onChange={(event, newValue) => setDitherRadius(newValue)}\n              valueLabelDisplay=\"auto\"\n            />\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nRetropixels.propTypes = {\n  jimpImage: PropTypes.shape(),\n  filename: PropTypes.string\n};\n\nRetropixels.defaultProps = {\n  jimpImage: undefined,\n  filename: 'output'\n};\n\nexport default Retropixels;\n","export default __webpack_public_path__ + \"static/media/logo.42e2fcaf.svg\";","export default {buildnr: '2021-05-29.ffdcbc1', url: 'https://github.com/micheldebree/retropixels/commit/ffdcbc160c694b8a865e7ee8fc11ddc150c83c39'}\n","import React, { useState } from 'react';\nimport { Grid, AppBar, Toolbar, Typography, Button, Link } from '@material-ui/core';\nimport './App.css';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ImagePreProcessor from './ImagePreProcessor';\nimport Retropixels from './Retropixels';\nimport Logo from './logo.svg';\nimport AppVersion from './version';\n\n// https://github.com/harishmahamure/photoCompress\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nfunction App() {\n  const [sourceImage, setSourceImage] = useState(undefined);\n  const [filename, setFilename] = useState(undefined);\n\n  const classes = useStyles();\n\n  function onSourceImageChanged(newSourceImage) {\n    setSourceImage(newSourceImage.jimpImage);\n    setFilename(newSourceImage.filename);\n  }\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">Retropixels</header> */}\n      <body className=\"App-body\">\n        <div className={classes.root}>\n          <AppBar position=\"static\">\n            <Toolbar variant=\"dense\">\n              <img src={Logo} alt=\"Logo\" className=\"logo\" />\n              <Typography variant=\"h6\" className={classes.title} align=\"left\">\n                Retropixels\n              </Typography>\n              <Link href={AppVersion.url} color=\"inherit\" variant=\"body2\">\n                v{AppVersion.buildnr}\n              </Link>\n              <Button color=\"inherit\" href=\"https://github.com/micheldebree/retropixels\">\n                <GitHubIcon />\n              </Button>\n            </Toolbar>\n          </AppBar>\n        </div>\n        <Grid container spacing={3}>\n          <Grid item xs>\n            <ImagePreProcessor onChanged={onSourceImageChanged} />\n          </Grid>\n          <Grid item xs>\n            <Retropixels jimpImage={sourceImage} filename={filename} />\n          </Grid>\n        </Grid>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}