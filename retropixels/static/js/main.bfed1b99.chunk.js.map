{"version":3,"sources":["Utilities.js","Canvas.jsx","ImageUpload.jsx","MyRadioButtons.jsx","MyCheckbox.jsx","MySlider.jsx","ResetButton.jsx","ImageSource.jsx","RetropixelsImage.jsx","PaletteControl.jsx","Retropixels.jsx","logo.svg","version.js","App.jsx","reportWebVitals.js","index.jsx"],"names":["parseFilename","filename","periodPos","lastIndexOf","extension","substring","length","basename","Math","min","abbreviateFilename","maxSize","parsed","Canvas","props","canvasRef","React","useRef","width","height","imageData","useEffect","undefined","current","getContext","putImageData","Box","m","ref","defaultProps","ImageUpload","onload","useState","error","setError","useDropzone","accept","maxFiles","acceptedFiles","fileRejections","getRootProps","getInputProps","file","reader","FileReader","onabort","onerror","Jimp","read","result","then","img","jimpImage","name","catch","err","message","readAsArrayBuffer","readFile","rejectedFile","errorMessages","errors","map","e","reduce","a","path","Container","border","boxShadow","borderRadius","borderColor","className","Typography","color","gutterBottom","Snackbar","open","autoHideDuration","onClose","Alert","severity","MyRadioButtons","label","value","items","onChange","tooltip","Tooltip","title","FormControl","component","FormLabel","RadioGroup","row","aria-label","event","target","i","FormControlLabel","control","Radio","MyCheckbox","arrow","Checkbox","checked","MySlider","max","step","icon","disabled","Grid","container","item","xs","Slider","newValue","valueLabelDisplay","ResetButton","onClick","align","Button","size","variant","startIcon","normalizeDefault","greyscaleDefault","mirrorHorDefault","mirrorVerDefault","invertDefault","ImageSource","onChanged","sourceImage","setSourceImage","croppedImage","setCroppedImage","image","setImage","setImageData","setFilename","scale","setScale","normalize","setNormalize","greyscale","setGreyscale","mirrorHor","setMirrorHor","mirrorVer","setMirrorVer","invert","setInvert","brightness","setBrightness","contrast","setContrast","blur","setBlur","threshold","setThreshold","onLoadedCallback","useCallback","data","dataSize","bitmap","slice","ImageData","Uint8ClampedArray","from","getImageDataFromJimpImage","newImage","clone","cover","contain","blitImage","crop","this","clearJimpImage","blit","cropJimpImage","cropImage","mirror","autoGreyscale","defaultsSet","v","graphicMode","GraphicModes","all","RetropixelsImage","hires","nomaps","colorspaceId","palette","ditherId","ditherRadius","defaultQuantizer","Quantizer","ColorSpaces","defaultConverter","Converter","defaultDitherer","OrderedDither","presets","pixelImage","setPixelImage","converter","setConverter","ditherer","setDitherer","quantizer","newPixelImage","resizedImage","resize","mode","resizeToTargetSize","dither","convert","imageWidth","pixelWidth","y","x","paletteIndex","peek","pixelValue","Palettes","colodore","colors","xx","index","r","g","b","getImageDataFromPixelImage","paletteOptions","paletteIdDefault","PaletteControl","enabledDefault","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","paletteId","setPaletteId","setPalette","enabledMap","setEnabledMap","enabledColors","useMemo","Object","keys","filter","k","newPalette","enabled","newEnabledMap","subPalette","startIndex","id","push","ListItem","ListItemIcon","fontSize","style","List","dense","ditherOptions","colorspaceOptions","ditherDefault","paletteDefault","colorspaceDefault","hiresDefault","nomapsDefault","Retropixels","colorspace","setColorSpace","setHires","setNomaps","setDither","setDitherRadius","paletteCallback","p","newPixelImageCallback","targetFilename","getDefaultExtension","parsedFilename","outputFormat","sm","md","binary","C64Writer","toBinary","buffer","toBuffer","blob","Blob","type","saveAs","saveOutput","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","App","classes","AppBar","position","Toolbar","src","Logo","alt","Link","href","AppVersion","newSourceImage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bfed1b99.chunk.js","sourcesContent":["export function parseFilename(filename) {\n  const periodPos = filename.lastIndexOf('.');\n  const extension = filename.substring(periodPos + 1, filename.length);\n  const basename = filename.substring(0, Math.min(30, periodPos));\n  return { basename, extension };\n}\n\nexport function abbreviateFilename(filename, maxSize) {\n  if (filename.length <= maxSize) {\n    return filename;\n  }\n  const parsed = parseFilename(filename);\n  return `${parsed.basename.substring(0, maxSize)}...${parsed.extension}`;\n}\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from '@material-ui/core';\n\nfunction Canvas(props) {\n  const canvasRef = React.useRef(null);\n  const getContext = () => canvasRef.current.getContext('2d');\n\n  const { width, height, imageData } = props;\n\n  // if imagedata property is set/changes, draw it on the canvas\n  useEffect(() => {\n    if (imageData !== undefined) {\n      getContext().putImageData(imageData, 0, 0);\n    }\n  }, [imageData]);\n\n  return (\n    <Box m={2}>\n      <canvas ref={canvasRef} width={width} height={height} />\n    </Box>\n  );\n}\n\nCanvas.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  imageData: PropTypes.shape()\n};\n\nCanvas.defaultProps = {\n  imageData: undefined\n};\n\nexport default Canvas;\n","import React, { useState, useEffect } from 'react';\nimport Jimp from 'jimp/es';\nimport PropTypes from 'prop-types';\nimport { useDropzone } from 'react-dropzone';\nimport { Container, Box, Snackbar, Typography } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport Canvas from './Canvas';\n\n// Lets the user select an image file\n// When a valid image is selected, calls the \"onload\" callback with a JimpImage object.\nfunction ImageUpload(props) {\n  const { onload, imageData } = props;\n\n  const [error, setError] = useState(undefined);\n  const { acceptedFiles, fileRejections, getRootProps, getInputProps } = useDropzone({\n    accept: 'image/*',\n    maxFiles: 1\n  });\n\n  useEffect(() => {\n    const readFile = file => {\n      const reader = new FileReader();\n\n      reader.onabort = () => setError('file reading was aborted');\n      reader.onerror = () => setError('file reading has failed');\n      reader.onload = () => {\n        Jimp.read(reader.result)\n          .then(img => {\n            setError(undefined);\n            onload({ jimpImage: img, filename: file.name });\n          })\n          .catch(err => {\n            setError(err.message);\n          });\n      };\n      reader.readAsArrayBuffer(file);\n    };\n    if (acceptedFiles !== undefined && acceptedFiles.length === 1) {\n      readFile(acceptedFiles[0]);\n    }\n  }, [acceptedFiles, onload]);\n\n  useEffect(() => {\n    if (fileRejections !== undefined && fileRejections.length > 0) {\n      const rejectedFile = fileRejections[0];\n      const errorMessages = rejectedFile.errors.map(e => e.message).reduce((a, e) => `${a},${e}`);\n      setError(`Cannot load ${rejectedFile.file.path}: ${errorMessages}`);\n    }\n  }, [fileRejections]);\n\n  return (\n    <Container>\n      <Box border={0} m={1} boxShadow={2} borderRadius=\"borderRadius\" borderColor=\"textSecondary\">\n        <div {...getRootProps({ className: 'dropzone' })}>\n          <input {...getInputProps()} />\n          <Canvas width={320} height={200} imageData={imageData} />\n          <Typography color=\"textSecondary\" gutterBottom>\n            Drop image here, or click to browse\n          </Typography>\n        </div>\n      </Box>\n      <Snackbar open={error} autoHideDuration={6000} onClose={() => setError(undefined)}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Snackbar>\n    </Container>\n  );\n}\n\nImageUpload.propTypes = {\n  // callback when image is loaded successfully\n  onload: PropTypes.func.isRequired,\n  imageData: PropTypes.shape()\n};\n\nImageUpload.defaultProps = {\n  imageData: undefined\n};\nexport default ImageUpload;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Tooltip } from '@material-ui/core';\n\nfunction MyRadioButtons(props) {\n  const { label, value, items, onChange, tooltip } = props;\n\n  return (\n    <Tooltip title={tooltip}>\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\">{label}</FormLabel>\n        <RadioGroup\n          row\n          aria-label={label}\n          name={`select${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n        >\n          {items.map(i => (\n            <FormControlLabel key={i} value={i} control={<Radio />} label={i} />\n          ))}\n        </RadioGroup>\n      </FormControl>\n    </Tooltip>\n  );\n}\n\nMyRadioButtons.propTypes = {\n  label: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  items: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  onChange: PropTypes.func.isRequired,\n  tooltip: PropTypes.string.isRequired\n};\n\nMyRadioButtons.defaultProps = {\n  label: 'Choose'\n};\n\nexport default MyRadioButtons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox, FormControlLabel, Tooltip } from '@material-ui/core';\n\nfunction MyCheckbox(props) {\n  const { name, label, value, onChange, tooltip } = props;\n\n  return (\n    <Tooltip title={tooltip} arrow>\n      <FormControlLabel\n        control={\n          <Checkbox checked={value} onChange={event => onChange(event.target.checked)} name={`${name}Checkbox`} />\n        }\n        label={label}\n      />\n    </Tooltip>\n  );\n}\n\nMyCheckbox.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.bool.isRequired,\n  onChange: PropTypes.func.isRequired,\n  tooltip: PropTypes.string.isRequired\n};\n\nexport default MyCheckbox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Slider, Tooltip, FormLabel } from '@material-ui/core';\n\nfunction MySlider(props) {\n  const { label, value, min, max, step, onChange, tooltip, icon, disabled } = props;\n\n  return (\n    <>\n      <FormLabel component=\"legend\">{label}</FormLabel>\n      <Tooltip title={tooltip} arrow>\n        <Grid container>\n          <Grid item>{icon} &nbsp;</Grid>\n          <Grid item xs>\n            <Slider\n              min={min}\n              max={max}\n              step={step}\n              value={value}\n              onChange={(event, newValue) => onChange(newValue)}\n              valueLabelDisplay=\"auto\"\n              disabled={disabled}\n            />\n          </Grid>\n        </Grid>\n      </Tooltip>\n    </>\n  );\n}\n\nMySlider.propTypes = {\n  icon: PropTypes.node.isRequired,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.number.isRequired,\n  min: PropTypes.number,\n  max: PropTypes.number.isRequired,\n  step: PropTypes.number,\n  onChange: PropTypes.func.isRequired,\n  tooltip: PropTypes.string.isRequired,\n  disabled: PropTypes.bool\n};\n\nMySlider.defaultProps = {\n  min: 0,\n  step: 1,\n  disabled: false\n};\n\nexport default MySlider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Box, Tooltip } from '@material-ui/core';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\n\nfunction ResetButton(props) {\n  const { onClick, disabled } = props;\n\n  return (\n    <Box align=\"left\" m={2}>\n      <Tooltip title=\"Reset controls below to their default settings\" arrow>\n        <Button size=\"small\" variant=\"outlined\" disabled={disabled} startIcon={<AutorenewIcon />} onClick={onClick}>\n          defaults\n        </Button>\n      </Tooltip>\n    </Box>\n  );\n}\n\nResetButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};\n\nResetButton.defaultProps = {\n  disabled: false\n};\n\nexport default ResetButton;\n","import React, { useEffect, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport * as Jimp from 'jimp';\nimport { Container } from '@material-ui/core';\nimport Brightness5OutlinedIcon from '@material-ui/icons/Brightness5Outlined';\nimport Brightness6OutlinedIcon from '@material-ui/icons/Brightness6Outlined';\nimport BrokenImageOutlinedIcon from '@material-ui/icons/BrokenImageOutlined';\nimport BlurOnOutlinedIcon from '@material-ui/icons/BlurOnOutlined';\nimport { abbreviateFilename } from './Utilities';\nimport ImageUpload from './ImageUpload';\nimport MyRadioButtons from './MyRadioButtons';\nimport MyCheckbox from './MyCheckbox';\nimport MySlider from './MySlider';\nimport ResetButton from './ResetButton';\n\n// defaults\nconst normalizeDefault = true;\nconst greyscaleDefault = false;\nconst mirrorHorDefault = false;\nconst mirrorVerDefault = false;\nconst invertDefault = false;\nconst brightnessDefault = 0;\nconst contrastDefault = 0;\nconst blurDefault = 0;\nconst thresholdDefault = 0;\n\nfunction cropJimpImage(jimpImage) {\n  const isTooSmall = jimpImage.bitmap.width < 320 || jimpImage.bitmap.height < 200;\n  let blitImage;\n\n  // if the image is too small, the cropped image is cleared,\n  // and then the smaller image is blitted onto it\n  // this is a workaround for artifacts when cropping images to larger sizes\n  if (isTooSmall) {\n    blitImage = jimpImage.clone();\n  }\n  jimpImage.crop(0, 0, 320, 200);\n  if (blitImage !== undefined) {\n    this.clearJimpImage(jimpImage);\n    jimpImage.blit(blitImage, 0, 0);\n  }\n}\n\nfunction cropImage(image, scale) {\n  const newImage = image.clone();\n  if (scale === 'fill') {\n    newImage.cover(320, 200, Jimp.RESIZE_HERMITE);\n  } else if (scale === 'fit') {\n    newImage.contain(320, 200, Jimp.RESIZE_HERMITE);\n  } else {\n    cropJimpImage(newImage);\n  }\n  return newImage;\n}\n\nfunction getImageDataFromJimpImage(jimpImage) {\n  if (jimpImage === undefined) {\n    return undefined;\n  }\n\n  // TODO: Jimp does not seem to shrink the data array when resizing picture to a smaller size... Confirm?\n  const dataSize = jimpImage.bitmap.width * jimpImage.bitmap.height * 4;\n  let data;\n  if (jimpImage.bitmap.data.length > dataSize) {\n    data = jimpImage.bitmap.data.slice(0, dataSize);\n  } else {\n    data = jimpImage.bitmap.data;\n  }\n\n  return jimpImage !== undefined\n    ? new ImageData(Uint8ClampedArray.from(data), jimpImage.bitmap.width, jimpImage.bitmap.height)\n    : undefined;\n}\n\nfunction ImageSource(props) {\n  const { onChanged } = props;\n\n  // the originally uploaded image\n  const [sourceImage, setSourceImage] = useState(undefined);\n\n  // the source image after cropping\n  const [croppedImage, setCroppedImage] = useState(undefined);\n\n  // the final processed image\n  const [image, setImage] = useState(undefined);\n\n  // the image data to show on the canvas\n  const [imageData, setImageData] = useState(undefined);\n\n  const [filename, setFilename] = useState('input');\n  const [scale, setScale] = useState('fill');\n  const [normalize, setNormalize] = useState(normalizeDefault);\n  const [greyscale, setGreyscale] = useState(greyscaleDefault);\n  const [mirrorHor, setMirrorHor] = useState(mirrorHorDefault);\n  const [mirrorVer, setMirrorVer] = useState(mirrorVerDefault);\n  const [invert, setInvert] = useState(invertDefault);\n  const [brightness, setBrightness] = useState(brightnessDefault);\n  const [contrast, setContrast] = useState(contrastDefault);\n  const [blur, setBlur] = useState(blurDefault);\n  const [threshold, setThreshold] = useState(thresholdDefault);\n\n  // memoize the callback to avoid re-rendering\n  const onLoadedCallback = useCallback(img => {\n    setSourceImage(img.jimpImage);\n    setFilename(img.filename);\n  }, []);\n\n  // reset all controls to default\n  function reset() {\n    setNormalize(normalizeDefault);\n    setGreyscale(greyscaleDefault);\n    setMirrorHor(mirrorHorDefault);\n    setMirrorVer(mirrorVerDefault);\n    setInvert(invertDefault);\n    setBrightness(brightnessDefault);\n    setContrast(contrastDefault);\n    setBlur(blurDefault);\n    setThreshold(thresholdDefault);\n  }\n\n  // if the processed image has changed, notify owner\n  useEffect(() => {\n    if (image !== undefined) {\n      onChanged({ jimpImage: image, filename });\n      setImageData(getImageDataFromJimpImage(image));\n    }\n  }, [image, onChanged, filename]);\n\n  // if the source image has changed, apply cropping\n  useEffect(() => {\n    if (sourceImage === undefined) {\n      return;\n    }\n    setCroppedImage(cropImage(sourceImage, scale));\n  }, [sourceImage, scale]);\n\n  // if the cropped image or any of the controls change, update the image\n  useEffect(() => {\n    if (croppedImage === undefined) {\n      return;\n    }\n    const newImage = croppedImage.clone();\n\n    if (greyscale) {\n      newImage.greyscale();\n    }\n    if (normalize) {\n      newImage.normalize();\n    }\n\n    newImage.brightness(brightness);\n    newImage.contrast(contrast);\n\n    if (blur > 0) {\n      newImage.blur(blur);\n    }\n\n    newImage.mirror(mirrorHor, mirrorVer);\n\n    if (invert) {\n      newImage.invert();\n    }\n\n    if (threshold > 0) {\n      newImage.threshold({ max: threshold, autoGreyscale: false });\n    }\n\n    setImage(newImage);\n  }, [croppedImage, normalize, brightness, contrast, greyscale, blur, mirrorHor, mirrorVer, invert, threshold]);\n\n  const defaultsSet =\n    normalize === normalizeDefault &&\n    greyscale === greyscaleDefault &&\n    mirrorHor === mirrorHorDefault &&\n    mirrorVer === mirrorVerDefault &&\n    invert === invertDefault &&\n    contrast === contrastDefault &&\n    brightness === brightnessDefault &&\n    blur === blurDefault &&\n    threshold === thresholdDefault;\n\n  return (\n    <>\n      <h4>{abbreviateFilename(filename, 30)}</h4>\n      <Container>\n        <ImageUpload imageData={imageData} onload={onLoadedCallback} />\n      </Container>\n      <Container align=\"left\">\n        <MyRadioButtons\n          label=\"cropping\"\n          items={['crop', 'fill', 'fit']}\n          value={scale}\n          onChange={setScale}\n          tooltip=\"Type of cropping to apply to source image\"\n        />\n      </Container>\n\n      <ResetButton onClick={reset} disabled={defaultsSet} />\n\n      <Container align=\"left\">\n        <MyCheckbox\n          name=\"normalize\"\n          label=\"normalize\"\n          value={normalize}\n          onChange={setNormalize}\n          tooltip=\"Stretch color intensities to their full range\"\n        />\n        <MyCheckbox\n          name=\"greyscale\"\n          label=\"greyscale\"\n          value={greyscale}\n          onChange={setGreyscale}\n          tooltip=\"Convert to black and white\"\n        />\n        <MyCheckbox name=\"invert\" label=\"invert\" value={invert} onChange={v => setInvert(v)} tooltip=\"Invert colors\" />\n        <MyCheckbox\n          name=\"mirrorHor\"\n          label=\"flip horizontal\"\n          value={mirrorHor}\n          onChange={setMirrorHor}\n          tooltip=\"Mirror image horizontally\"\n        />\n        <MyCheckbox\n          name=\"mirrorVer\"\n          label=\"flip vertical\"\n          value={mirrorVer}\n          onChange={setMirrorVer}\n          tooltip=\"Mirror image vertically\"\n        />\n        <MySlider\n          label=\"brightness\"\n          value={brightness}\n          min={-1.0}\n          max={1.0}\n          step={0.05}\n          onChange={setBrightness}\n          tooltip=\"Adjust image brightness\"\n          icon={<Brightness5OutlinedIcon />}\n        />\n        <MySlider\n          label=\"contrast\"\n          value={contrast}\n          min={-1.0}\n          max={1.0}\n          step={0.05}\n          onChange={setContrast}\n          tooltip=\"Adjust image contrast\"\n          icon={<Brightness6OutlinedIcon />}\n        />\n        <MySlider\n          label=\"blur\"\n          value={blur}\n          max={10}\n          onChange={setBlur}\n          tooltip=\"Blur image by this many pixels\"\n          icon={<BlurOnOutlinedIcon />}\n        />\n        <MySlider\n          label=\"threshold\"\n          value={threshold}\n          max={255}\n          onChange={setThreshold}\n          tooltip=\"Convert to black and white and remove pixels below this intensity threshold. (0 = off)\"\n          icon={<BrokenImageOutlinedIcon />}\n        />\n      </Container>\n    </>\n  );\n}\n\nImageSource.propTypes = {\n  onChanged: PropTypes.func.isRequired\n};\n\nexport default ImageSource;\n","import React, { useEffect, useState } from 'react';\nimport { ColorSpaces, Quantizer, Converter, GraphicModes, Palettes, OrderedDither } from 'retropixels-core';\nimport PropTypes from 'prop-types';\nimport Canvas from './Canvas';\n\nconst graphicMode = GraphicModes.all.bitmap;\n\n// resize JIMP image to the size needed for conversion to a pixelImage\nfunction resizeToTargetSize(jimpImage, pixelImage) {\n  const result = jimpImage.clone();\n  result.resize(pixelImage.mode.width, pixelImage.mode.height);\n  return result;\n}\n\nfunction getImageDataFromPixelImage(pixelImage) {\n  if (pixelImage === undefined) {\n    return new ImageData(1, 1);\n  }\n  const imageWidth = pixelImage.mode.width * pixelImage.mode.pixelWidth;\n  const imageData = new ImageData(imageWidth, pixelImage.mode.height);\n  for (let y = 0; y < pixelImage.mode.height; y += 1) {\n    for (let x = 0; x < pixelImage.mode.width; x += 1) {\n      const paletteIndex = pixelImage.peek(x, y);\n      const pixelValue = paletteIndex !== undefined ? Palettes.all.colodore.colors[paletteIndex] : [0, 0, 0, 0];\n      for (let xx = 0; xx < pixelImage.mode.pixelWidth; xx += 1) {\n        const index = y * 4 * imageWidth + x * pixelImage.mode.pixelWidth * 4 + xx * 4;\n        const [r, g, b] = pixelValue;\n        imageData.data[index] = r;\n        imageData.data[index + 1] = g;\n        imageData.data[index + 2] = b;\n        imageData.data[index + 3] = 0xff;\n      }\n    }\n  }\n  return imageData;\n}\n\nfunction RetropixelsImage(props) {\n  const { jimpImage, onChanged, hires, nomaps, colorspaceId, palette, ditherId, ditherRadius } = props;\n\n  const defaultQuantizer = new Quantizer(palette, ColorSpaces.all[colorspaceId]);\n  const defaultConverter = new Converter(defaultQuantizer);\n  const defaultDitherer = new OrderedDither(OrderedDither.presets[ditherId], ditherRadius);\n\n  const [pixelImage, setPixelImage] = useState(undefined);\n  const [imageData, setImageData] = useState(undefined);\n\n  const [converter, setConverter] = useState(defaultConverter);\n  const [ditherer, setDitherer] = useState(defaultDitherer);\n\n  useEffect(() => {\n    const quantizer = new Quantizer(palette, ColorSpaces.all[colorspaceId]);\n    setConverter(new Converter(quantizer));\n  }, [colorspaceId, palette]);\n\n  useEffect(() => {\n    setDitherer(new OrderedDither(OrderedDither.presets[ditherId], ditherRadius));\n  }, [ditherId, ditherRadius]);\n\n  useEffect(() => {\n    if (jimpImage === undefined) {\n      return;\n    }\n\n    const newPixelImage = graphicMode({ hires, nomaps });\n    const resizedImage = resizeToTargetSize(jimpImage, newPixelImage);\n    ditherer.dither(resizedImage.bitmap);\n    setPixelImage(newPixelImage);\n    converter.convert(resizedImage.bitmap, newPixelImage);\n    setPixelImage(newPixelImage);\n  }, [jimpImage, hires, nomaps, converter, ditherer]);\n\n  useEffect(() => {\n    setImageData(getImageDataFromPixelImage(pixelImage));\n    onChanged(pixelImage);\n  }, [pixelImage, onChanged]);\n\n  return <Canvas width={320} height={200} imageData={imageData} />;\n}\n\nRetropixelsImage.propTypes = {\n  jimpImage: PropTypes.shape(),\n  onChanged: PropTypes.func,\n  hires: PropTypes.bool,\n  nomaps: PropTypes.bool,\n  colorspaceId: PropTypes.string,\n  palette: PropTypes.shape(),\n  ditherId: PropTypes.string,\n  ditherRadius: PropTypes.number\n};\n\nRetropixelsImage.defaultProps = {\n  jimpImage: undefined,\n  onChanged: () => {},\n  hires: false,\n  nomaps: false,\n  colorspaceId: 'xyz',\n  palette: Palettes.all.colodore,\n  ditherId: 'bayer4x4',\n  ditherRadius: 32\n};\n\nexport default RetropixelsImage;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox, Grid, List, ListItem, ListItemIcon, Container, Box } from '@material-ui/core';\nimport { Palettes } from 'retropixels-core';\nimport Brightness1Icon from '@material-ui/icons/Brightness1';\nimport MyRadioButtons from './MyRadioButtons';\nimport ResetButton from './ResetButton';\n\nconst paletteOptions = ['colodore', 'pepto'];\nconst paletteIdDefault = 'colodore';\n\nfunction PaletteControl(props) {\n  const { onChange } = props;\n\n  const enabledDefault = {\n    0: true,\n    1: true,\n    2: true,\n    3: true,\n    4: true,\n    5: true,\n    6: true,\n    7: true,\n    8: true,\n    9: true,\n    10: true,\n    11: true,\n    12: true,\n    13: true,\n    14: true,\n    15: true\n  };\n\n  const [paletteId, setPaletteId] = useState(paletteIdDefault);\n  const [palette, setPalette] = useState(Palettes.all[paletteId]);\n  const [enabledMap, setEnabledMap] = useState(enabledDefault);\n\n  const enabledColors = useMemo(() => Object.keys(enabledMap).filter(k => enabledMap[k]), [enabledMap]);\n\n  useEffect(() => {\n    const newPalette = { ...Palettes.all[paletteId] };\n    newPalette.enabled = enabledColors;\n    setPalette(newPalette);\n  }, [paletteId, enabledColors]);\n\n  useEffect(() => {\n    onChange(palette);\n  }, [palette, onChange]);\n\n  const defaultsSet = enabledColors.length === palette.colors.length && paletteId === paletteIdDefault;\n\n  function reset() {\n    setEnabledMap(enabledDefault);\n    setPaletteId(paletteIdDefault);\n  }\n\n  function onChanged(index) {\n    return () => {\n      const newValue = !enabledMap[index];\n      if (!newValue && enabledColors.length <= 1) {\n        return;\n      }\n      const newEnabledMap = { ...enabledMap };\n      newEnabledMap[index] = newValue;\n      setEnabledMap(newEnabledMap);\n    };\n  }\n\n  function subPalette(startIndex) {\n    const result = [];\n    for (let i = startIndex; i < startIndex + 8; i += 1) {\n      const [r, g, b] = palette.colors[i];\n      const id = `${r}${g}${b}`;\n      result.push(\n        <ListItem key={id}>\n          <ListItemIcon>\n            <Checkbox checked={enabledMap[i]} onChange={onChanged(i)} name={`${id}cb`} />\n          </ListItemIcon>\n          <Box boxShadow={1} borderRadius=\"borderRadius\">\n            <Brightness1Icon fontSize=\"small\" style={{ color: `rgb(${r}, ${g}, ${b})` }} />\n          </Box>\n        </ListItem>\n      );\n    }\n    return result;\n  }\n\n  return (\n    <>\n      <Grid container>\n        <Grid item xs={12} align=\"left\">\n          <ResetButton onClick={reset} disabled={defaultsSet} />\n          <Container align=\"left\">\n            <MyRadioButtons\n              label=\"palette\"\n              value={paletteId}\n              items={paletteOptions}\n              onChange={setPaletteId}\n              tooltip=\"Use this palette for quantizing\"\n            />\n          </Container>\n        </Grid>\n        <Grid item xs={6}>\n          <List dense>{subPalette(0)}</List>\n        </Grid>\n        <Grid item xs={6}>\n          <List dense>{subPalette(8)}</List>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nPaletteControl.propTypes = {\n  onChange: PropTypes.func.isRequired\n};\n\nexport default PaletteControl;\n","import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Container, Tooltip, Grid } from '@material-ui/core';\nimport BlurLinearIcon from '@material-ui/icons/BlurLinear';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\nimport { C64Writer, Palettes } from 'retropixels-core';\nimport { saveAs } from 'file-saver';\nimport { parseFilename } from './Utilities';\nimport MyRadioButtons from './MyRadioButtons';\nimport RetropixelsImage from './RetropixelsImage';\nimport MyCheckbox from './MyCheckbox';\nimport MySlider from './MySlider';\nimport ResetButton from './ResetButton';\nimport PaletteControl from './PaletteControl';\n\n// options\nconst ditherOptions = ['none', 'bayer2x2', 'bayer4x4', 'bayer8x8'];\nconst colorspaceOptions = ['rgb', 'yuv', 'xyz', 'rainbow'];\n\n// defaults\nconst ditherDefault = 'bayer4x4';\nconst paletteDefault = Palettes.all.colodore;\nconst colorspaceDefault = 'xyz';\nconst hiresDefault = false;\nconst nomapsDefault = false;\nconst ditherRadiusDefault = 32;\n\nfunction getDefaultExtension(pixelImage) {\n  return pixelImage.mode.pixelWidth === 1 ? '.art' : '.kla';\n}\n\nfunction saveOutput(pixelImage, targetFilename) {\n  const binary = C64Writer.toBinary(pixelImage);\n  const buffer = C64Writer.toBuffer(binary);\n  const blob = new Blob([buffer], { type: 'application/octet-stream' });\n  saveAs(blob, targetFilename);\n}\n\nfunction Retropixels(props) {\n  const { jimpImage, filename } = props;\n\n  const [pixelImage, setPixelImage] = useState(undefined);\n  const [colorspace, setColorSpace] = useState(colorspaceDefault);\n  const [palette, setPalette] = useState(paletteDefault);\n  const [hires, setHires] = useState(hiresDefault);\n  const [nomaps, setNomaps] = useState(nomapsDefault);\n  const [dither, setDither] = useState(ditherDefault);\n  const [ditherRadius, setDitherRadius] = useState(ditherRadiusDefault);\n\n  // memoize the callback to avoid re-renders\n  const paletteCallback = useCallback(p => setPalette(p), []);\n  const newPixelImageCallback = useCallback(i => setPixelImage(i), []);\n\n  let targetFilename = 'output';\n  if (pixelImage !== undefined) {\n    const extension = getDefaultExtension(pixelImage);\n    const parsedFilename = parseFilename(filename);\n    targetFilename = `${parsedFilename.basename.substring(0, 30)}${extension}`;\n  }\n\n  function reset() {\n    setColorSpace(colorspaceDefault);\n    setHires(hiresDefault);\n    setNomaps(nomapsDefault);\n    setDither(ditherDefault);\n    setDitherRadius(ditherRadiusDefault);\n  }\n\n  // function savePNG() {\n  //   JimpPreprocessor.toJimpImage(pixelImage, Palettes.all[palette]).then(outputJimpImage => {\n  //     outputJimpImage.image\n  //       .getBufferAsync(Jimp.MIME_PNG)\n  //       .then(buffer => {\n  //         const blob = new Blob([buffer], { type: 'application/octet-stream' });\n  //         saveAs(blob, 'test.png');\n  //       })\n  //       .catch(error => alert(error));\n  //   });\n  // }\n\n  let outputFormat = 'output';\n  if (pixelImage !== undefined) {\n    outputFormat = pixelImage.mode.pixelWidth === 1 ? 'art studio file' : 'koala painter file';\n  }\n\n  const defaultsSet =\n    colorspace === colorspaceDefault &&\n    hires === hiresDefault &&\n    nomaps === nomapsDefault &&\n    dither === ditherDefault &&\n    ditherRadius === ditherRadiusDefault;\n\n  return (\n    <Grid container>\n      <Grid item xs={12} sm={12} md={6}>\n        <h4>{outputFormat}</h4>\n        <Container>\n          <RetropixelsImage\n            jimpImage={jimpImage}\n            onChanged={newPixelImageCallback}\n            hires={hires}\n            nomaps={nomaps}\n            colorspaceId={colorspace}\n            palette={palette}\n            ditherId={dither}\n            ditherRadius={ditherRadius}\n          />\n        </Container>\n        <Container>\n          <Tooltip title={`Download the image as ${outputFormat}`} arrow>\n            <Button\n              variant=\"contained\"\n              disabled={pixelImage === undefined}\n              color=\"primary\"\n              startIcon={<CloudDownloadIcon />}\n              onClick={() => saveOutput(pixelImage, targetFilename)}\n            >\n              Download\n            </Button>\n          </Tooltip>\n        </Container>\n        <ResetButton onClick={reset} disabled={defaultsSet} />\n        <Container align=\"left\">\n          <MyCheckbox\n            name=\"hires\"\n            label=\"hires\"\n            value={hires}\n            onChange={setHires}\n            tooltip=\"Use high resolution mode instead of multi color\"\n          />\n          <MyCheckbox\n            name=\"nomaps\"\n            label=\"single color layers\"\n            value={nomaps}\n            onChange={setNomaps}\n            tooltip=\"Restrict each attribute layer to a single color\"\n          />\n        </Container>\n        <Container align=\"left\">\n          <MyRadioButtons\n            label=\"colorspace\"\n            value={colorspace}\n            items={colorspaceOptions}\n            onChange={setColorSpace}\n            tooltip=\"Convert colors to this color space before quantizing\"\n          />\n          <MyRadioButtons\n            label=\"dithering\"\n            value={dither}\n            items={ditherOptions}\n            onChange={setDither}\n            tooltip=\"Type of dithering to apply\"\n          />\n          <MySlider\n            label=\"dithering strength\"\n            value={ditherRadius}\n            max={64}\n            onChange={setDitherRadius}\n            tooltip=\"Strength of dithering\"\n            icon={<BlurLinearIcon />}\n            disabled={dither === 'none'}\n          />\n        </Container>\n      </Grid>\n      <Grid item xs>\n        <h4>palette</h4>\n        <PaletteControl onChange={paletteCallback} />\n      </Grid>\n    </Grid>\n  );\n}\n\nRetropixels.propTypes = {\n  jimpImage: PropTypes.shape(),\n  filename: PropTypes.string\n};\n\nRetropixels.defaultProps = {\n  jimpImage: undefined,\n  filename: 'output'\n};\n\nexport default Retropixels;\n","export default __webpack_public_path__ + \"static/media/logo.42e2fcaf.svg\";","export default {buildnr: '2021-06-12.860cf59', url: 'https://github.com/micheldebree/retropixels/commit/860cf59dc205b7a598dfc710c1b60809885bdc21'}\n","import React, { useState } from 'react';\nimport { Grid, AppBar, Toolbar, Typography, Button, Link, Container } from '@material-ui/core';\nimport './App.css';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ImageSource from './ImageSource';\nimport Retropixels from './Retropixels';\nimport Logo from './logo.svg';\nimport AppVersion from './version';\n\n// https://github.com/harishmahamure/photoCompress\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nfunction App() {\n  const [sourceImage, setSourceImage] = useState(undefined);\n  const [filename, setFilename] = useState(undefined);\n\n  const classes = useStyles();\n\n  function onSourceImageChanged(newSourceImage) {\n    setSourceImage(newSourceImage.jimpImage);\n    setFilename(newSourceImage.filename);\n  }\n  return (\n    <div className=\"App\">\n      <body className=\"App-body\">\n        <div className={classes.root}>\n          <AppBar position=\"static\">\n            <Toolbar variant=\"dense\">\n              <img src={Logo} alt=\"Logo\" className=\"logo\" />\n              <Typography variant=\"h6\" className={classes.title} align=\"left\">\n                Retropixels\n              </Typography>\n              <Link href={AppVersion.url} color=\"inherit\" variant=\"body2\">\n                v{AppVersion.buildnr}\n              </Link>\n              <Button color=\"inherit\" href=\"https://github.com/micheldebree/retropixels\">\n                <GitHubIcon />\n              </Button>\n            </Toolbar>\n          </AppBar>\n        </div>\n        <Container align=\"left\">\n          <Typography variant=\"overline\">\n            Convert images to <Link href=\"https://en.wikipedia.org/wiki/Commodore_64\">Commodore 64</Link> format\n          </Typography>\n        </Container>\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={6} md={4}>\n            <ImageSource onChanged={onSourceImageChanged} />\n          </Grid>\n          <Grid item xs={12} sm={6} md={8}>\n            <Retropixels jimpImage={sourceImage} filename={filename} />\n          </Grid>\n        </Grid>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}